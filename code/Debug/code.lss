
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  000012a0  00001334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  008000aa  008000aa  0000137e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000137e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000400  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003bb3  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000114a  00000000  00000000  0000539f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000220a  00000000  00000000  000064e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cfc  00000000  00000000  000086f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001744  00000000  00000000  000093f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003237  00000000  00000000  0000ab34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000350  00000000  00000000  0000dd6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
       4:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <__vector_1>
       8:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <__vector_2>
       c:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__vector_3>
      10:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__vector_4>
      14:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__vector_5>
      18:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <__vector_6>
      1c:	0c 94 60 07 	jmp	0xec0	; 0xec0 <__vector_7>
      20:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__vector_8>
      24:	0c 94 04 07 	jmp	0xe08	; 0xe08 <__vector_9>
      28:	0c 94 d6 06 	jmp	0xdac	; 0xdac <__vector_10>
      2c:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__vector_11>
      30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      54:	9b 01       	movw	r18, r22
      56:	9f 01       	movw	r18, r30
      58:	a5 01       	movw	r20, r10
      5a:	ab 01       	movw	r20, r22
      5c:	b1 01       	movw	r22, r2
      5e:	b7 01       	movw	r22, r14
      60:	bd 01       	movw	r22, r26
      62:	b7 05       	cpc	r27, r7
      64:	c1 05       	cpc	r28, r1
      66:	cb 05       	cpc	r28, r11
      68:	06 06       	cpc	r0, r22
      6a:	d5 05       	cpc	r29, r5
      6c:	06 06       	cpc	r0, r22
      6e:	df 05       	cpc	r29, r15
      70:	e9 05       	cpc	r30, r9
      72:	f3 05       	cpc	r31, r3
      74:	fd 05       	cpc	r31, r13

00000076 <__ctors_end>:
      76:	11 24       	eor	r1, r1
      78:	1f be       	out	0x3f, r1	; 63
      7a:	cf e5       	ldi	r28, 0x5F	; 95
      7c:	d8 e0       	ldi	r29, 0x08	; 8
      7e:	de bf       	out	0x3e, r29	; 62
      80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
      82:	10 e0       	ldi	r17, 0x00	; 0
      84:	a0 e6       	ldi	r26, 0x60	; 96
      86:	b0 e0       	ldi	r27, 0x00	; 0
      88:	e0 ea       	ldi	r30, 0xA0	; 160
      8a:	f2 e1       	ldi	r31, 0x12	; 18
      8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
      8e:	05 90       	lpm	r0, Z+
      90:	0d 92       	st	X+, r0
      92:	aa 3a       	cpi	r26, 0xAA	; 170
      94:	b1 07       	cpc	r27, r17
      96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
      98:	20 e0       	ldi	r18, 0x00	; 0
      9a:	aa ea       	ldi	r26, 0xAA	; 170
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
      a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
      a2:	a2 3c       	cpi	r26, 0xC2	; 194
      a4:	b2 07       	cpc	r27, r18
      a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
      a8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <main>
      ac:	0c 94 4e 09 	jmp	0x129c	; 0x129c <_exit>

000000b0 <__bad_interrupt>:
      b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <EXTI_Notify>:
 *          that the button is pressed by setting the isButtonPressed flag to TRUE
 * @param   void
 * @return  void
 ********************************************************************************/
static void EXTI_Notify(void) {
    isButtonPressed = TRUE;
      b4:	81 e0       	ldi	r24, 0x01	; 1
      b6:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__data_end>
      ba:	08 95       	ret

000000bc <APP_CarsGreenState>:
 *          Then it will wait for 5 seconds, and if the button is pressed, it will
 *          change the state to pedestrian's init state
 * @param   void
 * @return  void
 ********************************************************************************/
static void APP_CarsGreenState(void) {
      bc:	cf 93       	push	r28
    LED_Set(LED_CAR_G);
      be:	61 e0       	ldi	r22, 0x01	; 1
      c0:	82 e0       	ldi	r24, 0x02	; 2
      c2:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>
    LED_Clr(LED_CAR_Y);
      c6:	60 e0       	ldi	r22, 0x00	; 0
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>
    LED_Clr(LED_CAR_R);
      ce:	60 e0       	ldi	r22, 0x00	; 0
      d0:	80 e0       	ldi	r24, 0x00	; 0
      d2:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>

    LED_Set(LED_PEDESTRIAN_R);
      d6:	61 e0       	ldi	r22, 0x01	; 1
      d8:	83 e0       	ldi	r24, 0x03	; 3
      da:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>
    LED_Clr(LED_PEDESTRIAN_G);
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	85 e0       	ldi	r24, 0x05	; 5
      e2:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>
    LED_Clr(LED_PEDESTRIAN_Y);
      e6:	60 e0       	ldi	r22, 0x00	; 0
      e8:	84 e0       	ldi	r24, 0x04	; 4
      ea:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>

    for(u8_t i = 0; i < STATE_TIME_SEC; i++) {
      ee:	c0 e0       	ldi	r28, 0x00	; 0
      f0:	15 c0       	rjmp	.+42     	; 0x11c <APP_CarsGreenState+0x60>
        if(isButtonPressed) {
      f2:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__data_end>
      f6:	88 23       	and	r24, r24
      f8:	31 f0       	breq	.+12     	; 0x106 <APP_CarsGreenState+0x4a>
            isButtonPressed = FALSE;
      fa:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__data_end>
            appState = APP_STATE_PEDESTRIAN_INIT_STATE;
      fe:	84 e0       	ldi	r24, 0x04	; 4
     100:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <appState>
            return;
     104:	0d c0       	rjmp	.+26     	; 0x120 <APP_CarsGreenState+0x64>
        }

        TIMER_DelayMs(1000);
     106:	28 ee       	ldi	r18, 0xE8	; 232
     108:	33 e0       	ldi	r19, 0x03	; 3
     10a:	40 e0       	ldi	r20, 0x00	; 0
     10c:	50 e0       	ldi	r21, 0x00	; 0
     10e:	60 e0       	ldi	r22, 0x00	; 0
     110:	70 e0       	ldi	r23, 0x00	; 0
     112:	80 e0       	ldi	r24, 0x00	; 0
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	0e 94 77 06 	call	0xcee	; 0xcee <TIMER_DelayMs>

    LED_Set(LED_PEDESTRIAN_R);
    LED_Clr(LED_PEDESTRIAN_G);
    LED_Clr(LED_PEDESTRIAN_Y);

    for(u8_t i = 0; i < STATE_TIME_SEC; i++) {
     11a:	cf 5f       	subi	r28, 0xFF	; 255
     11c:	c5 30       	cpi	r28, 0x05	; 5
     11e:	48 f3       	brcs	.-46     	; 0xf2 <APP_CarsGreenState+0x36>
            return;
        }

        TIMER_DelayMs(1000);
    }
}
     120:	cf 91       	pop	r28
     122:	08 95       	ret

00000124 <APP_CarsRedState>:
 *          change the state to pedestrian's green state   
 * 
 * @param   void
 * @return  void
 ********************************************************************************/
static void APP_CarsRedState(void) {
     124:	cf 93       	push	r28
    LED_Set(LED_CAR_R);
     126:	61 e0       	ldi	r22, 0x01	; 1
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>
    LED_Clr(LED_CAR_G);
     12e:	60 e0       	ldi	r22, 0x00	; 0
     130:	82 e0       	ldi	r24, 0x02	; 2
     132:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>
    LED_Clr(LED_CAR_Y);
     136:	60 e0       	ldi	r22, 0x00	; 0
     138:	81 e0       	ldi	r24, 0x01	; 1
     13a:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>

    LED_Set(LED_PEDESTRIAN_R);
     13e:	61 e0       	ldi	r22, 0x01	; 1
     140:	83 e0       	ldi	r24, 0x03	; 3
     142:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>
    LED_Clr(LED_PEDESTRIAN_G);
     146:	60 e0       	ldi	r22, 0x00	; 0
     148:	85 e0       	ldi	r24, 0x05	; 5
     14a:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>
    LED_Clr(LED_PEDESTRIAN_Y);
     14e:	60 e0       	ldi	r22, 0x00	; 0
     150:	84 e0       	ldi	r24, 0x04	; 4
     152:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>

    for(u8_t i = 0; i < STATE_TIME_SEC; i++) {
     156:	c0 e0       	ldi	r28, 0x00	; 0
     158:	15 c0       	rjmp	.+42     	; 0x184 <APP_CarsRedState+0x60>
        if(isButtonPressed) {
     15a:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__data_end>
     15e:	88 23       	and	r24, r24
     160:	31 f0       	breq	.+12     	; 0x16e <APP_CarsRedState+0x4a>
            isButtonPressed = FALSE;
     162:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__data_end>
            appState = APP_STATE_PEDESTRIAN_GREEN_STATE;
     166:	85 e0       	ldi	r24, 0x05	; 5
     168:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <appState>
            return;
     16c:	0d c0       	rjmp	.+26     	; 0x188 <APP_CarsRedState+0x64>
        }

        TIMER_DelayMs(1000);
     16e:	28 ee       	ldi	r18, 0xE8	; 232
     170:	33 e0       	ldi	r19, 0x03	; 3
     172:	40 e0       	ldi	r20, 0x00	; 0
     174:	50 e0       	ldi	r21, 0x00	; 0
     176:	60 e0       	ldi	r22, 0x00	; 0
     178:	70 e0       	ldi	r23, 0x00	; 0
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 77 06 	call	0xcee	; 0xcee <TIMER_DelayMs>

    LED_Set(LED_PEDESTRIAN_R);
    LED_Clr(LED_PEDESTRIAN_G);
    LED_Clr(LED_PEDESTRIAN_Y);

    for(u8_t i = 0; i < STATE_TIME_SEC; i++) {
     182:	cf 5f       	subi	r28, 0xFF	; 255
     184:	c5 30       	cpi	r28, 0x05	; 5
     186:	48 f3       	brcs	.-46     	; 0x15a <APP_CarsRedState+0x36>
            return;
        }

        TIMER_DelayMs(1000);
    }
}
     188:	cf 91       	pop	r28
     18a:	08 95       	ret

0000018c <APP_PedestrianGreenState>:
 *          final state. If the button is pressed, it has no effect
 * @param   void
 * @return  void
 ********************************************************************************/
static void APP_PedestrianGreenState(void) {
    LED_Set(LED_PEDESTRIAN_G);
     18c:	61 e0       	ldi	r22, 0x01	; 1
     18e:	85 e0       	ldi	r24, 0x05	; 5
     190:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>
    LED_Clr(LED_PEDESTRIAN_R);
     194:	60 e0       	ldi	r22, 0x00	; 0
     196:	83 e0       	ldi	r24, 0x03	; 3
     198:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>
    LED_Clr(LED_PEDESTRIAN_Y);
     19c:	60 e0       	ldi	r22, 0x00	; 0
     19e:	84 e0       	ldi	r24, 0x04	; 4
     1a0:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>

    LED_Set(LED_CAR_R);
     1a4:	61 e0       	ldi	r22, 0x01	; 1
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>
    LED_Clr(LED_CAR_G);
     1ac:	60 e0       	ldi	r22, 0x00	; 0
     1ae:	82 e0       	ldi	r24, 0x02	; 2
     1b0:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>
    LED_Clr(LED_CAR_Y);
     1b4:	60 e0       	ldi	r22, 0x00	; 0
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>

    TIMER_DelayMs(5000);
     1bc:	28 e8       	ldi	r18, 0x88	; 136
     1be:	33 e1       	ldi	r19, 0x13	; 19
     1c0:	40 e0       	ldi	r20, 0x00	; 0
     1c2:	50 e0       	ldi	r21, 0x00	; 0
     1c4:	60 e0       	ldi	r22, 0x00	; 0
     1c6:	70 e0       	ldi	r23, 0x00	; 0
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	0e 94 77 06 	call	0xcee	; 0xcee <TIMER_DelayMs>
    if(isButtonPressed) {
     1d0:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__data_end>
     1d4:	81 11       	cpse	r24, r1
        isButtonPressed = FALSE;
     1d6:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__data_end>
     1da:	08 95       	ret

000001dc <APP_CarsYellowState>:
 *          Then it will wait for 5 seconds, and if the button is pressed, it will
 *          change the state to pedestrian's initial state
 * @param   void
 * @return  void
 ********************************************************************************/
static void APP_CarsYellowState(void) {
     1dc:	cf 93       	push	r28
    LED_Set(LED_CAR_Y);
     1de:	61 e0       	ldi	r22, 0x01	; 1
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>
    LED_Set(LED_CAR_G);
     1e6:	61 e0       	ldi	r22, 0x01	; 1
     1e8:	82 e0       	ldi	r24, 0x02	; 2
     1ea:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>
    LED_Clr(LED_CAR_R);
     1ee:	60 e0       	ldi	r22, 0x00	; 0
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>

    LED_Set(LED_PEDESTRIAN_R);
     1f6:	61 e0       	ldi	r22, 0x01	; 1
     1f8:	83 e0       	ldi	r24, 0x03	; 3
     1fa:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>
    LED_Clr(LED_PEDESTRIAN_G);
     1fe:	60 e0       	ldi	r22, 0x00	; 0
     200:	85 e0       	ldi	r24, 0x05	; 5
     202:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>
    LED_Clr(LED_PEDESTRIAN_Y);
     206:	60 e0       	ldi	r22, 0x00	; 0
     208:	84 e0       	ldi	r24, 0x04	; 4
     20a:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>

    for(u8_t i = 0; i < STATE_TIME_SEC; i++) {
     20e:	c0 e0       	ldi	r28, 0x00	; 0
     210:	18 c0       	rjmp	.+48     	; 0x242 <APP_CarsYellowState+0x66>
        if(isButtonPressed) {
     212:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__data_end>
     216:	88 23       	and	r24, r24
     218:	31 f0       	breq	.+12     	; 0x226 <APP_CarsYellowState+0x4a>
            isButtonPressed = FALSE;
     21a:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__data_end>
            appState = APP_STATE_PEDESTRIAN_INIT_STATE;
     21e:	84 e0       	ldi	r24, 0x04	; 4
     220:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <appState>
            return;
     224:	10 c0       	rjmp	.+32     	; 0x246 <APP_CarsYellowState+0x6a>
        }

        TIMER_DelayMs(1000);
     226:	28 ee       	ldi	r18, 0xE8	; 232
     228:	33 e0       	ldi	r19, 0x03	; 3
     22a:	40 e0       	ldi	r20, 0x00	; 0
     22c:	50 e0       	ldi	r21, 0x00	; 0
     22e:	60 e0       	ldi	r22, 0x00	; 0
     230:	70 e0       	ldi	r23, 0x00	; 0
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 77 06 	call	0xcee	; 0xcee <TIMER_DelayMs>

        LED_Toggle(LED_CAR_Y);
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	0e 94 21 02 	call	0x442	; 0x442 <LED_Toggle>

    LED_Set(LED_PEDESTRIAN_R);
    LED_Clr(LED_PEDESTRIAN_G);
    LED_Clr(LED_PEDESTRIAN_Y);

    for(u8_t i = 0; i < STATE_TIME_SEC; i++) {
     240:	cf 5f       	subi	r28, 0xFF	; 255
     242:	c5 30       	cpi	r28, 0x05	; 5
     244:	30 f3       	brcs	.-52     	; 0x212 <APP_CarsYellowState+0x36>

        TIMER_DelayMs(1000);

        LED_Toggle(LED_CAR_Y);
    }
}
     246:	cf 91       	pop	r28
     248:	08 95       	ret

0000024a <APP_PedestrianInitState>:
 *          Then it will wait for 5 seconds, and change the state to pedestrian's 
 *          green state. If the button is pressed, it has no effect
 * @param   void
 * @return  void
 ********************************************************************************/
static void APP_PedestrianInitState(void) {
     24a:	cf 93       	push	r28
    LED_Clr(LED_PEDESTRIAN_G);
     24c:	60 e0       	ldi	r22, 0x00	; 0
     24e:	85 e0       	ldi	r24, 0x05	; 5
     250:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>
    LED_Clr(LED_PEDESTRIAN_R);
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	83 e0       	ldi	r24, 0x03	; 3
     258:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>
    LED_Set(LED_PEDESTRIAN_Y);
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	84 e0       	ldi	r24, 0x04	; 4
     260:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>

    LED_Clr(LED_CAR_R);
     264:	60 e0       	ldi	r22, 0x00	; 0
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>
    LED_Set(LED_CAR_G);
     26c:	61 e0       	ldi	r22, 0x01	; 1
     26e:	82 e0       	ldi	r24, 0x02	; 2
     270:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>
    LED_Set(LED_CAR_Y);  
     274:	61 e0       	ldi	r22, 0x01	; 1
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>

    for(u8_t i = 0; i < STATE_TIME_SEC; i++) {
     27c:	c0 e0       	ldi	r28, 0x00	; 0
     27e:	11 c0       	rjmp	.+34     	; 0x2a2 <APP_PedestrianInitState+0x58>
        TIMER_DelayMs(1000);
     280:	28 ee       	ldi	r18, 0xE8	; 232
     282:	33 e0       	ldi	r19, 0x03	; 3
     284:	40 e0       	ldi	r20, 0x00	; 0
     286:	50 e0       	ldi	r21, 0x00	; 0
     288:	60 e0       	ldi	r22, 0x00	; 0
     28a:	70 e0       	ldi	r23, 0x00	; 0
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e 94 77 06 	call	0xcee	; 0xcee <TIMER_DelayMs>

        LED_Toggle(LED_PEDESTRIAN_Y);
     294:	84 e0       	ldi	r24, 0x04	; 4
     296:	0e 94 21 02 	call	0x442	; 0x442 <LED_Toggle>
        LED_Toggle(LED_CAR_Y);
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	0e 94 21 02 	call	0x442	; 0x442 <LED_Toggle>

    LED_Clr(LED_CAR_R);
    LED_Set(LED_CAR_G);
    LED_Set(LED_CAR_Y);  

    for(u8_t i = 0; i < STATE_TIME_SEC; i++) {
     2a0:	cf 5f       	subi	r28, 0xFF	; 255
     2a2:	c5 30       	cpi	r28, 0x05	; 5
     2a4:	68 f3       	brcs	.-38     	; 0x280 <APP_PedestrianInitState+0x36>

        LED_Toggle(LED_PEDESTRIAN_Y);
        LED_Toggle(LED_CAR_Y);
    }

    if(isButtonPressed) {
     2a6:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__data_end>
     2aa:	81 11       	cpse	r24, r1
        isButtonPressed = FALSE;
     2ac:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__data_end>
    }
}
     2b0:	cf 91       	pop	r28
     2b2:	08 95       	ret

000002b4 <APP_PedestrianFinalState>:
 *          state. 
 *          If the button is pressed, it has no effect
 * @param   void
 * @return  void
 ********************************************************************************/
static void APP_PedestrianFinalState(void) {
     2b4:	cf 93       	push	r28
    LED_Set(LED_PEDESTRIAN_G);
     2b6:	61 e0       	ldi	r22, 0x01	; 1
     2b8:	85 e0       	ldi	r24, 0x05	; 5
     2ba:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>
    LED_Clr(LED_PEDESTRIAN_R);
     2be:	60 e0       	ldi	r22, 0x00	; 0
     2c0:	83 e0       	ldi	r24, 0x03	; 3
     2c2:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>
    LED_Set(LED_PEDESTRIAN_Y);
     2c6:	61 e0       	ldi	r22, 0x01	; 1
     2c8:	84 e0       	ldi	r24, 0x04	; 4
     2ca:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>

    LED_Clr(LED_CAR_R);
     2ce:	60 e0       	ldi	r22, 0x00	; 0
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>
    LED_Clr(LED_CAR_G);
     2d6:	60 e0       	ldi	r22, 0x00	; 0
     2d8:	82 e0       	ldi	r24, 0x02	; 2
     2da:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>
    LED_Set(LED_CAR_Y);
     2de:	61 e0       	ldi	r22, 0x01	; 1
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_SetClr>

    for(u8_t i = 0; i < STATE_TIME_SEC; i++) {        
     2e6:	c0 e0       	ldi	r28, 0x00	; 0
     2e8:	11 c0       	rjmp	.+34     	; 0x30c <APP_PedestrianFinalState+0x58>
        TIMER_DelayMs(1000);
     2ea:	28 ee       	ldi	r18, 0xE8	; 232
     2ec:	33 e0       	ldi	r19, 0x03	; 3
     2ee:	40 e0       	ldi	r20, 0x00	; 0
     2f0:	50 e0       	ldi	r21, 0x00	; 0
     2f2:	60 e0       	ldi	r22, 0x00	; 0
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 77 06 	call	0xcee	; 0xcee <TIMER_DelayMs>

        LED_Toggle(LED_PEDESTRIAN_Y);
     2fe:	84 e0       	ldi	r24, 0x04	; 4
     300:	0e 94 21 02 	call	0x442	; 0x442 <LED_Toggle>
        LED_Toggle(LED_CAR_Y);
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	0e 94 21 02 	call	0x442	; 0x442 <LED_Toggle>

    LED_Clr(LED_CAR_R);
    LED_Clr(LED_CAR_G);
    LED_Set(LED_CAR_Y);

    for(u8_t i = 0; i < STATE_TIME_SEC; i++) {        
     30a:	cf 5f       	subi	r28, 0xFF	; 255
     30c:	c5 30       	cpi	r28, 0x05	; 5
     30e:	68 f3       	brcs	.-38     	; 0x2ea <APP_PedestrianFinalState+0x36>

        LED_Toggle(LED_PEDESTRIAN_Y);
        LED_Toggle(LED_CAR_Y);
    }

    if(isButtonPressed) {
     310:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__data_end>
     314:	81 11       	cpse	r24, r1
        isButtonPressed = FALSE;
     316:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__data_end>
    }
}
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <APP_UpdateState>:
 *          state
 * @param   void
 * @return  void
 ********************************************************************************/
static void APP_UpdateState(void) {
    switch(appState) {
     31e:	e0 91 ab 00 	lds	r30, 0x00AB	; 0x8000ab <appState>
     322:	8e 2f       	mov	r24, r30
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	87 30       	cpi	r24, 0x07	; 7
     328:	91 05       	cpc	r25, r1
     32a:	60 f5       	brcc	.+88     	; 0x384 <APP_UpdateState+0x66>
     32c:	fc 01       	movw	r30, r24
     32e:	e6 5d       	subi	r30, 0xD6	; 214
     330:	ff 4f       	sbci	r31, 0xFF	; 255
     332:	0c 94 48 09 	jmp	0x1290	; 0x1290 <__tablejump2__>
        case APP_STATE_INIT:
            appState = APP_STATE_CARS_GREEN;
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <appState>
            break;
     33c:	08 95       	ret
        case APP_STATE_CARS_GREEN:
            appState = APP_STATE_CARS_YELLOW;
     33e:	82 e0       	ldi	r24, 0x02	; 2
     340:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <appState>
            APP_CarsGreenState();
     344:	0e 94 5e 00 	call	0xbc	; 0xbc <APP_CarsGreenState>
            break;
     348:	08 95       	ret
        case APP_STATE_CARS_YELLOW:
            appState = APP_STATE_CARS_RED;
     34a:	83 e0       	ldi	r24, 0x03	; 3
     34c:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <appState>
            APP_CarsYellowState();
     350:	0e 94 ee 00 	call	0x1dc	; 0x1dc <APP_CarsYellowState>
            break;
     354:	08 95       	ret
        case APP_STATE_CARS_RED:
            appState = APP_STATE_CARS_GREEN;
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <appState>
            APP_CarsRedState();
     35c:	0e 94 92 00 	call	0x124	; 0x124 <APP_CarsRedState>
            break;
     360:	08 95       	ret
        case APP_STATE_PEDESTRIAN_INIT_STATE:
            appState = APP_STATE_PEDESTRIAN_GREEN_STATE;
     362:	85 e0       	ldi	r24, 0x05	; 5
     364:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <appState>
            APP_PedestrianInitState();
     368:	0e 94 25 01 	call	0x24a	; 0x24a <APP_PedestrianInitState>
            break;
     36c:	08 95       	ret
        case APP_STATE_PEDESTRIAN_GREEN_STATE:
            appState = APP_STATE_PEDESTRIAN_FINAL_STATE;
     36e:	86 e0       	ldi	r24, 0x06	; 6
     370:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <appState>
            APP_PedestrianGreenState();
     374:	0e 94 c6 00 	call	0x18c	; 0x18c <APP_PedestrianGreenState>
            break;
     378:	08 95       	ret
        case APP_STATE_PEDESTRIAN_FINAL_STATE:
            appState = APP_STATE_CARS_GREEN;
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <appState>
            APP_PedestrianFinalState();
     380:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <APP_PedestrianFinalState>
     384:	08 95       	ret

00000386 <APP_Init>:
/*                             PUBLIC FUNCTIONS                                 */
/*                                                                              */
/*------------------------------------------------------------------------------*/

void APP_Init(void) {
    appState = APP_STATE_INIT;
     386:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <appState>

    DIO_Init();
     38a:	0e 94 02 04 	call	0x804	; 0x804 <DIO_Init>
    EXTI_Init(EXTI_0, FALLING_EDGE, EXTI_Notify);
     38e:	4a e5       	ldi	r20, 0x5A	; 90
     390:	50 e0       	ldi	r21, 0x00	; 0
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	0e 94 00 05 	call	0xa00	; 0xa00 <EXTI_Init>
    LED_Init();
     39a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_Init>
    BUTTON_Init();
     39e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <BUTTON_Init>

    EXTI_EnableExternalInterrupt(EXTI_0);
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	0e 94 18 05 	call	0xa30	; 0xa30 <EXTI_EnableExternalInterrupt>
     3a8:	08 95       	ret

000003aa <APP_Start>:
}

void APP_Start(void) {
    APP_UpdateState();
     3aa:	0e 94 8f 01 	call	0x31e	; 0x31e <APP_UpdateState>

    while(1) {
		APP_UpdateState();
     3ae:	0e 94 8f 01 	call	0x31e	; 0x31e <APP_UpdateState>
     3b2:	fd cf       	rjmp	.-6      	; 0x3ae <APP_Start+0x4>

000003b4 <BUTTON_Init>:
/*                                                                              */
/*------------------------------------------------------------------------------*/

ERROR_t BUTTON_Init(void) {
    return ERROR_OK;
}
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	08 95       	ret

000003b8 <LED_ReadIndex>:
 * @return ERROR_t: The error status of the function.
 ******************************************************************************/
static ERROR_t LED_ReadIndex(const LED_t led, s8_t * const ptr_s8Index) {
    u8_t i = 0;

    if(NULL == ptr_s8Index) {
     3b8:	61 15       	cp	r22, r1
     3ba:	71 05       	cpc	r23, r1
     3bc:	c9 f0       	breq	.+50     	; 0x3f0 <LED_ReadIndex+0x38>
        return ERROR_NULL_POINTER;
    }

    *ptr_s8Index = -1;
     3be:	9f ef       	ldi	r25, 0xFF	; 255
     3c0:	fb 01       	movw	r30, r22
     3c2:	90 83       	st	Z, r25

    if( !ASSERT_LED(led) ) {
     3c4:	86 30       	cpi	r24, 0x06	; 6
     3c6:	b0 f4       	brcc	.+44     	; 0x3f4 <LED_ReadIndex+0x3c>
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	0c c0       	rjmp	.+24     	; 0x3e4 <LED_ReadIndex+0x2c>
        return ERROR_INVALID_PARAMETER;
    }

    for(i = 0; i < countLedsConfigured; ++i) {
        if(led == ledConfigs[i].led) {
     3cc:	e9 2f       	mov	r30, r25
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	ee 0f       	add	r30, r30
     3d2:	ff 1f       	adc	r31, r31
     3d4:	e0 5a       	subi	r30, 0xA0	; 160
     3d6:	ff 4f       	sbci	r31, 0xFF	; 255
     3d8:	20 81       	ld	r18, Z
     3da:	82 13       	cpse	r24, r18
     3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <LED_ReadIndex+0x2a>
            *ptr_s8Index = i;
     3de:	fb 01       	movw	r30, r22
     3e0:	90 83       	st	Z, r25

    if( !ASSERT_LED(led) ) {
        return ERROR_INVALID_PARAMETER;
    }

    for(i = 0; i < countLedsConfigured; ++i) {
     3e2:	9f 5f       	subi	r25, 0xFF	; 255
     3e4:	20 91 8f 00 	lds	r18, 0x008F	; 0x80008f <countLedsConfigured>
     3e8:	92 17       	cp	r25, r18
     3ea:	80 f3       	brcs	.-32     	; 0x3cc <LED_ReadIndex+0x14>
        if(led == ledConfigs[i].led) {
            *ptr_s8Index = i;
        }
    }

    return ERROR_OK;
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	08 95       	ret
 ******************************************************************************/
static ERROR_t LED_ReadIndex(const LED_t led, s8_t * const ptr_s8Index) {
    u8_t i = 0;

    if(NULL == ptr_s8Index) {
        return ERROR_NULL_POINTER;
     3f0:	84 e0       	ldi	r24, 0x04	; 4
     3f2:	08 95       	ret
    }

    *ptr_s8Index = -1;

    if( !ASSERT_LED(led) ) {
        return ERROR_INVALID_PARAMETER;
     3f4:	80 e8       	ldi	r24, 0x80	; 128
            *ptr_s8Index = i;
        }
    }

    return ERROR_OK;
}
     3f6:	08 95       	ret

000003f8 <LED_Init>:
/*                                                                              */
/*------------------------------------------------------------------------------*/

ERROR_t LED_Init(void) {
    return ERROR_OK;
}
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	08 95       	ret

000003fc <LED_SetClr>:

ERROR_t LED_SetClr(const LED_t led, const STATE_t state) { 
     3fc:	0f 93       	push	r16
     3fe:	1f 93       	push	r17
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	1f 92       	push	r1
     406:	cd b7       	in	r28, 0x3d	; 61
     408:	de b7       	in	r29, 0x3e	; 62
     40a:	06 2f       	mov	r16, r22
    ERROR_t error = ERROR_OK;
    s8_t i = 0;
     40c:	19 82       	std	Y+1, r1	; 0x01
    
    error |= LED_ReadIndex(led, &i);
     40e:	be 01       	movw	r22, r28
     410:	6f 5f       	subi	r22, 0xFF	; 255
     412:	7f 4f       	sbci	r23, 0xFF	; 255
     414:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LED_ReadIndex>
     418:	18 2f       	mov	r17, r24
    
    if(i >= 0) {
     41a:	e9 81       	ldd	r30, Y+1	; 0x01
     41c:	ee 23       	and	r30, r30
     41e:	54 f0       	brlt	.+20     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
        error |= DIO_SetPinValue(ledConfigs[i].pin, state);
     420:	ee 0f       	add	r30, r30
     422:	ff 0b       	sbc	r31, r31
     424:	e0 5a       	subi	r30, 0xA0	; 160
     426:	ff 4f       	sbci	r31, 0xFF	; 255
     428:	60 2f       	mov	r22, r16
     42a:	81 81       	ldd	r24, Z+1	; 0x01
     42c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_SetPinValue>
     430:	81 2b       	or	r24, r17
     432:	01 c0       	rjmp	.+2      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
    } else {
        error |= ERROR_INVALID_PARAMETER;
     434:	80 68       	ori	r24, 0x80	; 128
    }

    return error;
}
     436:	0f 90       	pop	r0
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	1f 91       	pop	r17
     43e:	0f 91       	pop	r16
     440:	08 95       	ret

00000442 <LED_Toggle>:

ERROR_t LED_Toggle(const LED_t led) {
     442:	1f 93       	push	r17
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
     448:	00 d0       	rcall	.+0      	; 0x44a <LED_Toggle+0x8>
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
    ERROR_t error = ERROR_OK;
    STATE_t state = LOW;
     44e:	19 82       	std	Y+1, r1	; 0x01
    s8_t i = 0;
     450:	1a 82       	std	Y+2, r1	; 0x02
    
    error |= LED_ReadIndex(led, &i);
     452:	be 01       	movw	r22, r28
     454:	6e 5f       	subi	r22, 0xFE	; 254
     456:	7f 4f       	sbci	r23, 0xFF	; 255
     458:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LED_ReadIndex>
     45c:	18 2f       	mov	r17, r24
    if(i < 0) {
     45e:	ea 81       	ldd	r30, Y+2	; 0x02
     460:	ee 23       	and	r30, r30
     462:	cc f0       	brlt	.+50     	; 0x496 <LED_Toggle+0x54>
        return ERROR_INVALID_PARAMETER;
    }

    error |= DIO_ReadPin(ledConfigs[i].pin, &state);
     464:	ee 0f       	add	r30, r30
     466:	ff 0b       	sbc	r31, r31
     468:	e0 5a       	subi	r30, 0xA0	; 160
     46a:	ff 4f       	sbci	r31, 0xFF	; 255
     46c:	be 01       	movw	r22, r28
     46e:	6f 5f       	subi	r22, 0xFF	; 255
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	81 81       	ldd	r24, Z+1	; 0x01
     474:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_ReadPin>
     478:	18 2b       	or	r17, r24

    /* Toggle the LED */
    DIO_SetPinValue(ledConfigs[i].pin, !state);
     47a:	61 e0       	ldi	r22, 0x01	; 1
     47c:	89 81       	ldd	r24, Y+1	; 0x01
     47e:	81 11       	cpse	r24, r1
     480:	60 e0       	ldi	r22, 0x00	; 0
     482:	ea 81       	ldd	r30, Y+2	; 0x02
     484:	ee 0f       	add	r30, r30
     486:	ff 0b       	sbc	r31, r31
     488:	e0 5a       	subi	r30, 0xA0	; 160
     48a:	ff 4f       	sbci	r31, 0xFF	; 255
     48c:	81 81       	ldd	r24, Z+1	; 0x01
     48e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <DIO_SetPinValue>

    return error;
     492:	81 2f       	mov	r24, r17
     494:	01 c0       	rjmp	.+2      	; 0x498 <LED_Toggle+0x56>
    STATE_t state = LOW;
    s8_t i = 0;
    
    error |= LED_ReadIndex(led, &i);
    if(i < 0) {
        return ERROR_INVALID_PARAMETER;
     496:	80 e8       	ldi	r24, 0x80	; 128

    /* Toggle the LED */
    DIO_SetPinValue(ledConfigs[i].pin, !state);

    return error;
}
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	1f 91       	pop	r17
     4a2:	08 95       	ret

000004a4 <main>:
 ***************************************************************************/

#include "APP/app.h"

int main (void){    
    APP_Init();
     4a4:	0e 94 c3 01 	call	0x386	; 0x386 <APP_Init>

    while(1) {
        APP_Start();
     4a8:	0e 94 d5 01 	call	0x3aa	; 0x3aa <APP_Start>
     4ac:	fd cf       	rjmp	.-6      	; 0x4a8 <main+0x4>

000004ae <DIO_IsPinAvailable>:
    } else {
        error |= ERROR_INVALID_PARAMETER;
    }

    return error;
}
     4ae:	61 15       	cp	r22, r1
     4b0:	71 05       	cpc	r23, r1
     4b2:	c1 f1       	breq	.+112    	; 0x524 <DIO_IsPinAvailable+0x76>
     4b4:	9f ef       	ldi	r25, 0xFF	; 255
     4b6:	fb 01       	movw	r30, r22
     4b8:	90 83       	st	Z, r25
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	50 e0       	ldi	r21, 0x00	; 0
     4be:	2c c0       	rjmp	.+88     	; 0x518 <DIO_IsPinAvailable+0x6a>
     4c0:	29 2f       	mov	r18, r25
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	f9 01       	movw	r30, r18
     4c6:	ee 0f       	add	r30, r30
     4c8:	ff 1f       	adc	r31, r31
     4ca:	ee 0f       	add	r30, r30
     4cc:	ff 1f       	adc	r31, r31
     4ce:	e2 0f       	add	r30, r18
     4d0:	f3 1f       	adc	r31, r19
     4d2:	e4 59       	subi	r30, 0x94	; 148
     4d4:	ff 4f       	sbci	r31, 0xFF	; 255
     4d6:	40 81       	ld	r20, Z
     4d8:	48 13       	cpse	r20, r24
     4da:	1d c0       	rjmp	.+58     	; 0x516 <DIO_IsPinAvailable+0x68>
     4dc:	f9 01       	movw	r30, r18
     4de:	ee 0f       	add	r30, r30
     4e0:	ff 1f       	adc	r31, r31
     4e2:	ee 0f       	add	r30, r30
     4e4:	ff 1f       	adc	r31, r31
     4e6:	e2 0f       	add	r30, r18
     4e8:	f3 1f       	adc	r31, r19
     4ea:	e4 59       	subi	r30, 0x94	; 148
     4ec:	ff 4f       	sbci	r31, 0xFF	; 255
     4ee:	41 81       	ldd	r20, Z+1	; 0x01
     4f0:	48 30       	cpi	r20, 0x08	; 8
     4f2:	80 f4       	brcc	.+32     	; 0x514 <DIO_IsPinAvailable+0x66>
     4f4:	f9 01       	movw	r30, r18
     4f6:	ee 0f       	add	r30, r30
     4f8:	ff 1f       	adc	r31, r31
     4fa:	ee 0f       	add	r30, r30
     4fc:	ff 1f       	adc	r31, r31
     4fe:	2e 0f       	add	r18, r30
     500:	3f 1f       	adc	r19, r31
     502:	f9 01       	movw	r30, r18
     504:	e4 59       	subi	r30, 0x94	; 148
     506:	ff 4f       	sbci	r31, 0xFF	; 255
     508:	22 81       	ldd	r18, Z+2	; 0x02
     50a:	24 30       	cpi	r18, 0x04	; 4
     50c:	18 f4       	brcc	.+6      	; 0x514 <DIO_IsPinAvailable+0x66>
     50e:	fb 01       	movw	r30, r22
     510:	90 83       	st	Z, r25
     512:	01 c0       	rjmp	.+2      	; 0x516 <DIO_IsPinAvailable+0x68>
     514:	50 68       	ori	r21, 0x80	; 128
     516:	9f 5f       	subi	r25, 0xFF	; 255
     518:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <countPinsConfigured>
     51c:	92 17       	cp	r25, r18
     51e:	80 f2       	brcs	.-96     	; 0x4c0 <DIO_IsPinAvailable+0x12>
     520:	85 2f       	mov	r24, r21
     522:	08 95       	ret
     524:	84 e0       	ldi	r24, 0x04	; 4
     526:	08 95       	ret

00000528 <DIO_SetPinDirection>:
     528:	1f 93       	push	r17
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	1f 92       	push	r1
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
     534:	16 2f       	mov	r17, r22
     536:	9f ef       	ldi	r25, 0xFF	; 255
     538:	99 83       	std	Y+1, r25	; 0x01
     53a:	be 01       	movw	r22, r28
     53c:	6f 5f       	subi	r22, 0xFF	; 255
     53e:	7f 4f       	sbci	r23, 0xFF	; 255
     540:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_IsPinAvailable>
     544:	81 11       	cpse	r24, r1
     546:	49 c0       	rjmp	.+146    	; 0x5da <DIO_SetPinDirection+0xb2>
     548:	e9 81       	ldd	r30, Y+1	; 0x01
     54a:	ee 23       	and	r30, r30
     54c:	0c f4       	brge	.+2      	; 0x550 <DIO_SetPinDirection+0x28>
     54e:	45 c0       	rjmp	.+138    	; 0x5da <DIO_SetPinDirection+0xb2>
     550:	11 23       	and	r17, r17
     552:	09 f1       	breq	.+66     	; 0x596 <DIO_SetPinDirection+0x6e>
     554:	0e 2e       	mov	r0, r30
     556:	00 0c       	add	r0, r0
     558:	ff 0b       	sbc	r31, r31
     55a:	9f 01       	movw	r18, r30
     55c:	22 0f       	add	r18, r18
     55e:	33 1f       	adc	r19, r19
     560:	22 0f       	add	r18, r18
     562:	33 1f       	adc	r19, r19
     564:	e2 0f       	add	r30, r18
     566:	f3 1f       	adc	r31, r19
     568:	e4 59       	subi	r30, 0x94	; 148
     56a:	ff 4f       	sbci	r31, 0xFF	; 255
     56c:	a2 81       	ldd	r26, Z+2	; 0x02
     56e:	b0 e0       	ldi	r27, 0x00	; 0
     570:	aa 0f       	add	r26, r26
     572:	bb 1f       	adc	r27, r27
     574:	a8 56       	subi	r26, 0x68	; 104
     576:	bf 4f       	sbci	r27, 0xFF	; 255
     578:	0d 90       	ld	r0, X+
     57a:	bc 91       	ld	r27, X
     57c:	a0 2d       	mov	r26, r0
     57e:	9c 91       	ld	r25, X
     580:	21 e0       	ldi	r18, 0x01	; 1
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	01 80       	ldd	r0, Z+1	; 0x01
     586:	02 c0       	rjmp	.+4      	; 0x58c <DIO_SetPinDirection+0x64>
     588:	22 0f       	add	r18, r18
     58a:	33 1f       	adc	r19, r19
     58c:	0a 94       	dec	r0
     58e:	e2 f7       	brpl	.-8      	; 0x588 <DIO_SetPinDirection+0x60>
     590:	29 2b       	or	r18, r25
     592:	2c 93       	st	X, r18
     594:	23 c0       	rjmp	.+70     	; 0x5dc <DIO_SetPinDirection+0xb4>
     596:	0e 2e       	mov	r0, r30
     598:	00 0c       	add	r0, r0
     59a:	ff 0b       	sbc	r31, r31
     59c:	9f 01       	movw	r18, r30
     59e:	22 0f       	add	r18, r18
     5a0:	33 1f       	adc	r19, r19
     5a2:	22 0f       	add	r18, r18
     5a4:	33 1f       	adc	r19, r19
     5a6:	e2 0f       	add	r30, r18
     5a8:	f3 1f       	adc	r31, r19
     5aa:	e4 59       	subi	r30, 0x94	; 148
     5ac:	ff 4f       	sbci	r31, 0xFF	; 255
     5ae:	a2 81       	ldd	r26, Z+2	; 0x02
     5b0:	b0 e0       	ldi	r27, 0x00	; 0
     5b2:	aa 0f       	add	r26, r26
     5b4:	bb 1f       	adc	r27, r27
     5b6:	a8 56       	subi	r26, 0x68	; 104
     5b8:	bf 4f       	sbci	r27, 0xFF	; 255
     5ba:	0d 90       	ld	r0, X+
     5bc:	bc 91       	ld	r27, X
     5be:	a0 2d       	mov	r26, r0
     5c0:	9c 91       	ld	r25, X
     5c2:	21 e0       	ldi	r18, 0x01	; 1
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	01 80       	ldd	r0, Z+1	; 0x01
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <DIO_SetPinDirection+0xa6>
     5ca:	22 0f       	add	r18, r18
     5cc:	33 1f       	adc	r19, r19
     5ce:	0a 94       	dec	r0
     5d0:	e2 f7       	brpl	.-8      	; 0x5ca <DIO_SetPinDirection+0xa2>
     5d2:	20 95       	com	r18
     5d4:	29 23       	and	r18, r25
     5d6:	2c 93       	st	X, r18
     5d8:	01 c0       	rjmp	.+2      	; 0x5dc <DIO_SetPinDirection+0xb4>
     5da:	80 68       	ori	r24, 0x80	; 128
     5dc:	0f 90       	pop	r0
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	1f 91       	pop	r17
     5e4:	08 95       	ret

000005e6 <DIO_SetPinValue>:
     5e6:	1f 93       	push	r17
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
     5ec:	1f 92       	push	r1
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
     5f2:	16 2f       	mov	r17, r22
     5f4:	9f ef       	ldi	r25, 0xFF	; 255
     5f6:	99 83       	std	Y+1, r25	; 0x01
     5f8:	be 01       	movw	r22, r28
     5fa:	6f 5f       	subi	r22, 0xFF	; 255
     5fc:	7f 4f       	sbci	r23, 0xFF	; 255
     5fe:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_IsPinAvailable>
     602:	81 11       	cpse	r24, r1
     604:	49 c0       	rjmp	.+146    	; 0x698 <DIO_SetPinValue+0xb2>
     606:	e9 81       	ldd	r30, Y+1	; 0x01
     608:	ee 23       	and	r30, r30
     60a:	0c f4       	brge	.+2      	; 0x60e <DIO_SetPinValue+0x28>
     60c:	45 c0       	rjmp	.+138    	; 0x698 <DIO_SetPinValue+0xb2>
     60e:	11 23       	and	r17, r17
     610:	09 f1       	breq	.+66     	; 0x654 <DIO_SetPinValue+0x6e>
     612:	0e 2e       	mov	r0, r30
     614:	00 0c       	add	r0, r0
     616:	ff 0b       	sbc	r31, r31
     618:	9f 01       	movw	r18, r30
     61a:	22 0f       	add	r18, r18
     61c:	33 1f       	adc	r19, r19
     61e:	22 0f       	add	r18, r18
     620:	33 1f       	adc	r19, r19
     622:	e2 0f       	add	r30, r18
     624:	f3 1f       	adc	r31, r19
     626:	e4 59       	subi	r30, 0x94	; 148
     628:	ff 4f       	sbci	r31, 0xFF	; 255
     62a:	a2 81       	ldd	r26, Z+2	; 0x02
     62c:	b0 e0       	ldi	r27, 0x00	; 0
     62e:	aa 0f       	add	r26, r26
     630:	bb 1f       	adc	r27, r27
     632:	a0 56       	subi	r26, 0x60	; 96
     634:	bf 4f       	sbci	r27, 0xFF	; 255
     636:	0d 90       	ld	r0, X+
     638:	bc 91       	ld	r27, X
     63a:	a0 2d       	mov	r26, r0
     63c:	9c 91       	ld	r25, X
     63e:	21 e0       	ldi	r18, 0x01	; 1
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	01 80       	ldd	r0, Z+1	; 0x01
     644:	02 c0       	rjmp	.+4      	; 0x64a <DIO_SetPinValue+0x64>
     646:	22 0f       	add	r18, r18
     648:	33 1f       	adc	r19, r19
     64a:	0a 94       	dec	r0
     64c:	e2 f7       	brpl	.-8      	; 0x646 <DIO_SetPinValue+0x60>
     64e:	29 2b       	or	r18, r25
     650:	2c 93       	st	X, r18
     652:	23 c0       	rjmp	.+70     	; 0x69a <DIO_SetPinValue+0xb4>
     654:	0e 2e       	mov	r0, r30
     656:	00 0c       	add	r0, r0
     658:	ff 0b       	sbc	r31, r31
     65a:	9f 01       	movw	r18, r30
     65c:	22 0f       	add	r18, r18
     65e:	33 1f       	adc	r19, r19
     660:	22 0f       	add	r18, r18
     662:	33 1f       	adc	r19, r19
     664:	e2 0f       	add	r30, r18
     666:	f3 1f       	adc	r31, r19
     668:	e4 59       	subi	r30, 0x94	; 148
     66a:	ff 4f       	sbci	r31, 0xFF	; 255
     66c:	a2 81       	ldd	r26, Z+2	; 0x02
     66e:	b0 e0       	ldi	r27, 0x00	; 0
     670:	aa 0f       	add	r26, r26
     672:	bb 1f       	adc	r27, r27
     674:	a0 56       	subi	r26, 0x60	; 96
     676:	bf 4f       	sbci	r27, 0xFF	; 255
     678:	0d 90       	ld	r0, X+
     67a:	bc 91       	ld	r27, X
     67c:	a0 2d       	mov	r26, r0
     67e:	9c 91       	ld	r25, X
     680:	21 e0       	ldi	r18, 0x01	; 1
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	01 80       	ldd	r0, Z+1	; 0x01
     686:	02 c0       	rjmp	.+4      	; 0x68c <DIO_SetPinValue+0xa6>
     688:	22 0f       	add	r18, r18
     68a:	33 1f       	adc	r19, r19
     68c:	0a 94       	dec	r0
     68e:	e2 f7       	brpl	.-8      	; 0x688 <DIO_SetPinValue+0xa2>
     690:	20 95       	com	r18
     692:	29 23       	and	r18, r25
     694:	2c 93       	st	X, r18
     696:	01 c0       	rjmp	.+2      	; 0x69a <DIO_SetPinValue+0xb4>
     698:	80 68       	ori	r24, 0x80	; 128
     69a:	0f 90       	pop	r0
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	1f 91       	pop	r17
     6a2:	08 95       	ret

000006a4 <DIO_ReadPin>:

ERROR_t DIO_ReadPin(const DIO_PINS_t name, STATE_t * const ptrToState) {
     6a4:	0f 93       	push	r16
     6a6:	1f 93       	push	r17
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	1f 92       	push	r1
     6ae:	cd b7       	in	r28, 0x3d	; 61
     6b0:	de b7       	in	r29, 0x3e	; 62
     6b2:	8b 01       	movw	r16, r22
    ERROR_t error = ERROR_OK;
    s8_t i = -1;
     6b4:	9f ef       	ldi	r25, 0xFF	; 255
     6b6:	99 83       	std	Y+1, r25	; 0x01

    error |= DIO_IsPinAvailable(name, &i);
     6b8:	be 01       	movw	r22, r28
     6ba:	6f 5f       	subi	r22, 0xFF	; 255
     6bc:	7f 4f       	sbci	r23, 0xFF	; 255
     6be:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_IsPinAvailable>

    if( (ERROR_OK == error) && (i >= 0) ) {
     6c2:	81 11       	cpse	r24, r1
     6c4:	24 c0       	rjmp	.+72     	; 0x70e <DIO_ReadPin+0x6a>
     6c6:	e9 81       	ldd	r30, Y+1	; 0x01
     6c8:	ee 23       	and	r30, r30
     6ca:	0c f1       	brlt	.+66     	; 0x70e <DIO_ReadPin+0x6a>
        *ptrToState = BIT_READ(*PIN_reg[pinConfigs[i].port], pinConfigs[i].pin);
     6cc:	0e 2e       	mov	r0, r30
     6ce:	00 0c       	add	r0, r0
     6d0:	ff 0b       	sbc	r31, r31
     6d2:	9f 01       	movw	r18, r30
     6d4:	22 0f       	add	r18, r18
     6d6:	33 1f       	adc	r19, r19
     6d8:	22 0f       	add	r18, r18
     6da:	33 1f       	adc	r19, r19
     6dc:	e2 0f       	add	r30, r18
     6de:	f3 1f       	adc	r31, r19
     6e0:	e4 59       	subi	r30, 0x94	; 148
     6e2:	ff 4f       	sbci	r31, 0xFF	; 255
     6e4:	a2 81       	ldd	r26, Z+2	; 0x02
     6e6:	b0 e0       	ldi	r27, 0x00	; 0
     6e8:	aa 0f       	add	r26, r26
     6ea:	bb 1f       	adc	r27, r27
     6ec:	a0 57       	subi	r26, 0x70	; 112
     6ee:	bf 4f       	sbci	r27, 0xFF	; 255
     6f0:	0d 90       	ld	r0, X+
     6f2:	bc 91       	ld	r27, X
     6f4:	a0 2d       	mov	r26, r0
     6f6:	2c 91       	ld	r18, X
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	01 80       	ldd	r0, Z+1	; 0x01
     6fc:	02 c0       	rjmp	.+4      	; 0x702 <DIO_ReadPin+0x5e>
     6fe:	35 95       	asr	r19
     700:	27 95       	ror	r18
     702:	0a 94       	dec	r0
     704:	e2 f7       	brpl	.-8      	; 0x6fe <DIO_ReadPin+0x5a>
     706:	21 70       	andi	r18, 0x01	; 1
     708:	f8 01       	movw	r30, r16
     70a:	20 83       	st	Z, r18
     70c:	01 c0       	rjmp	.+2      	; 0x710 <DIO_ReadPin+0x6c>
    } else {
        error |= ERROR_INVALID_PARAMETER;
     70e:	80 68       	ori	r24, 0x80	; 128
    }

    return error;
}
     710:	0f 90       	pop	r0
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	1f 91       	pop	r17
     718:	0f 91       	pop	r16
     71a:	08 95       	ret

0000071c <DIO_SetClrPinPullup>:

ERROR_t DIO_SetClrPinPullup(const DIO_PINS_t pin, const DIO_PULLUP_t pullup) {
     71c:	1f 93       	push	r17
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	1f 92       	push	r1
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	16 2f       	mov	r17, r22
    ERROR_t error = ERROR_OK;
    s8_t i = -1;
     72a:	9f ef       	ldi	r25, 0xFF	; 255
     72c:	99 83       	std	Y+1, r25	; 0x01

    error |= DIO_IsPinAvailable(pin, &i);
     72e:	be 01       	movw	r22, r28
     730:	6f 5f       	subi	r22, 0xFF	; 255
     732:	7f 4f       	sbci	r23, 0xFF	; 255
     734:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_IsPinAvailable>

    if( (ERROR_OK == error) && (i >= 0) && ASSERT_PULLUP(pullup)) {
     738:	81 11       	cpse	r24, r1
     73a:	4d c0       	rjmp	.+154    	; 0x7d6 <DIO_SetClrPinPullup+0xba>
     73c:	29 81       	ldd	r18, Y+1	; 0x01
     73e:	22 23       	and	r18, r18
     740:	0c f4       	brge	.+2      	; 0x744 <DIO_SetClrPinPullup+0x28>
     742:	49 c0       	rjmp	.+146    	; 0x7d6 <DIO_SetClrPinPullup+0xba>
     744:	12 30       	cpi	r17, 0x02	; 2
     746:	08 f0       	brcs	.+2      	; 0x74a <DIO_SetClrPinPullup+0x2e>
     748:	46 c0       	rjmp	.+140    	; 0x7d6 <DIO_SetClrPinPullup+0xba>
        BIT_CTRL(*PORT_reg[pinConfigs[i].port], pinConfigs[i].pin, pullup);
     74a:	11 23       	and	r17, r17
     74c:	11 f1       	breq	.+68     	; 0x792 <DIO_SetClrPinPullup+0x76>
     74e:	02 2e       	mov	r0, r18
     750:	00 0c       	add	r0, r0
     752:	33 0b       	sbc	r19, r19
     754:	f9 01       	movw	r30, r18
     756:	ee 0f       	add	r30, r30
     758:	ff 1f       	adc	r31, r31
     75a:	ee 0f       	add	r30, r30
     75c:	ff 1f       	adc	r31, r31
     75e:	2e 0f       	add	r18, r30
     760:	3f 1f       	adc	r19, r31
     762:	f9 01       	movw	r30, r18
     764:	e4 59       	subi	r30, 0x94	; 148
     766:	ff 4f       	sbci	r31, 0xFF	; 255
     768:	a2 81       	ldd	r26, Z+2	; 0x02
     76a:	b0 e0       	ldi	r27, 0x00	; 0
     76c:	aa 0f       	add	r26, r26
     76e:	bb 1f       	adc	r27, r27
     770:	a0 56       	subi	r26, 0x60	; 96
     772:	bf 4f       	sbci	r27, 0xFF	; 255
     774:	0d 90       	ld	r0, X+
     776:	bc 91       	ld	r27, X
     778:	a0 2d       	mov	r26, r0
     77a:	9c 91       	ld	r25, X
     77c:	21 e0       	ldi	r18, 0x01	; 1
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	01 80       	ldd	r0, Z+1	; 0x01
     782:	02 c0       	rjmp	.+4      	; 0x788 <DIO_SetClrPinPullup+0x6c>
     784:	22 0f       	add	r18, r18
     786:	33 1f       	adc	r19, r19
     788:	0a 94       	dec	r0
     78a:	e2 f7       	brpl	.-8      	; 0x784 <DIO_SetClrPinPullup+0x68>
     78c:	29 2b       	or	r18, r25
     78e:	2c 93       	st	X, r18
     790:	23 c0       	rjmp	.+70     	; 0x7d8 <DIO_SetClrPinPullup+0xbc>
     792:	02 2e       	mov	r0, r18
     794:	00 0c       	add	r0, r0
     796:	33 0b       	sbc	r19, r19
     798:	f9 01       	movw	r30, r18
     79a:	ee 0f       	add	r30, r30
     79c:	ff 1f       	adc	r31, r31
     79e:	ee 0f       	add	r30, r30
     7a0:	ff 1f       	adc	r31, r31
     7a2:	e2 0f       	add	r30, r18
     7a4:	f3 1f       	adc	r31, r19
     7a6:	e4 59       	subi	r30, 0x94	; 148
     7a8:	ff 4f       	sbci	r31, 0xFF	; 255
     7aa:	a2 81       	ldd	r26, Z+2	; 0x02
     7ac:	b0 e0       	ldi	r27, 0x00	; 0
     7ae:	aa 0f       	add	r26, r26
     7b0:	bb 1f       	adc	r27, r27
     7b2:	a0 56       	subi	r26, 0x60	; 96
     7b4:	bf 4f       	sbci	r27, 0xFF	; 255
     7b6:	0d 90       	ld	r0, X+
     7b8:	bc 91       	ld	r27, X
     7ba:	a0 2d       	mov	r26, r0
     7bc:	9c 91       	ld	r25, X
     7be:	21 e0       	ldi	r18, 0x01	; 1
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	01 80       	ldd	r0, Z+1	; 0x01
     7c4:	02 c0       	rjmp	.+4      	; 0x7ca <DIO_SetClrPinPullup+0xae>
     7c6:	22 0f       	add	r18, r18
     7c8:	33 1f       	adc	r19, r19
     7ca:	0a 94       	dec	r0
     7cc:	e2 f7       	brpl	.-8      	; 0x7c6 <DIO_SetClrPinPullup+0xaa>
     7ce:	20 95       	com	r18
     7d0:	29 23       	and	r18, r25
     7d2:	2c 93       	st	X, r18
     7d4:	01 c0       	rjmp	.+2      	; 0x7d8 <DIO_SetClrPinPullup+0xbc>
    } else {
        error |= ERROR_INVALID_PARAMETER;
     7d6:	80 68       	ori	r24, 0x80	; 128
    }

    return error;
}
     7d8:	0f 90       	pop	r0
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	1f 91       	pop	r17
     7e0:	08 95       	ret

000007e2 <DIO_InitPin>:
    }

    return error;
}

ERROR_t DIO_InitPin(const DIO_PINS_t pin, const DIO_DIR_t direction, const DIO_PULLUP_t pullup) {
     7e2:	1f 93       	push	r17
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	c8 2f       	mov	r28, r24
     7ea:	14 2f       	mov	r17, r20
    ERROR_t error = ERROR_OK;
    
    error |= DIO_SetPinDirection(pin, direction);
     7ec:	0e 94 94 02 	call	0x528	; 0x528 <DIO_SetPinDirection>
     7f0:	d8 2f       	mov	r29, r24
    error |= DIO_SetClrPinPullup(pin, pullup); 
     7f2:	61 2f       	mov	r22, r17
     7f4:	8c 2f       	mov	r24, r28
     7f6:	0e 94 8e 03 	call	0x71c	; 0x71c <DIO_SetClrPinPullup>
    
    return error;
}
     7fa:	8d 2b       	or	r24, r29
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	1f 91       	pop	r17
     802:	08 95       	ret

00000804 <DIO_Init>:

/*******************************************************************************
 * @details Initialize DIO pins to a specific direction (input or output), pullup 
 *          or not according to the configuration in the DIO_cfg.h file.  
 ******************************************************************************/
ERROR_t DIO_Init(void) {
     804:	cf 93       	push	r28
    ERROR_t error = ERROR_OK;
    u8_t i = 0;

    for(i = 0; i < countPinsConfigured; ++i) {
     806:	c0 e0       	ldi	r28, 0x00	; 0
     808:	11 c0       	rjmp	.+34     	; 0x82c <DIO_Init+0x28>
        DIO_InitPin(pinConfigs[i].name, pinConfigs[i].direction, pinConfigs[i].pullup);
     80a:	ec 2f       	mov	r30, r28
     80c:	f0 e0       	ldi	r31, 0x00	; 0
     80e:	cf 01       	movw	r24, r30
     810:	88 0f       	add	r24, r24
     812:	99 1f       	adc	r25, r25
     814:	88 0f       	add	r24, r24
     816:	99 1f       	adc	r25, r25
     818:	e8 0f       	add	r30, r24
     81a:	f9 1f       	adc	r31, r25
     81c:	e4 59       	subi	r30, 0x94	; 148
     81e:	ff 4f       	sbci	r31, 0xFF	; 255
     820:	44 81       	ldd	r20, Z+4	; 0x04
     822:	63 81       	ldd	r22, Z+3	; 0x03
     824:	80 81       	ld	r24, Z
     826:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <DIO_InitPin>
 ******************************************************************************/
ERROR_t DIO_Init(void) {
    ERROR_t error = ERROR_OK;
    u8_t i = 0;

    for(i = 0; i < countPinsConfigured; ++i) {
     82a:	cf 5f       	subi	r28, 0xFF	; 255
     82c:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <countPinsConfigured>
     830:	c8 17       	cp	r28, r24
     832:	58 f3       	brcs	.-42     	; 0x80a <DIO_Init+0x6>
        DIO_InitPin(pinConfigs[i].name, pinConfigs[i].direction, pinConfigs[i].pullup);
    }

    return error;
}
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	cf 91       	pop	r28
     838:	08 95       	ret

0000083a <EXTI_SetCallback>:
    } else {
        /* DEBUG    */
    }

    GIE_Enable();
}
     83a:	61 15       	cp	r22, r1
     83c:	71 05       	cpc	r23, r1
     83e:	51 f0       	breq	.+20     	; 0x854 <EXTI_SetCallback+0x1a>
     840:	83 30       	cpi	r24, 0x03	; 3
     842:	40 f4       	brcc	.+16     	; 0x854 <EXTI_SetCallback+0x1a>
     844:	e8 2f       	mov	r30, r24
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	ee 0f       	add	r30, r30
     84a:	ff 1f       	adc	r31, r31
     84c:	e4 55       	subi	r30, 0x54	; 84
     84e:	ff 4f       	sbci	r31, 0xFF	; 255
     850:	71 83       	std	Z+1, r23	; 0x01
     852:	60 83       	st	Z, r22
     854:	08 95       	ret

00000856 <EXTI_ClearInterruptFlag>:
     856:	83 30       	cpi	r24, 0x03	; 3
     858:	88 f4       	brcc	.+34     	; 0x87c <__stack+0x1d>
     85a:	81 11       	cpse	r24, r1
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	8a b7       	in	r24, 0x3a	; 58
     860:	80 64       	ori	r24, 0x40	; 64
     862:	8a bf       	out	0x3a, r24	; 58
     864:	08 95       	ret
     866:	81 30       	cpi	r24, 0x01	; 1
     868:	21 f4       	brne	.+8      	; 0x872 <__stack+0x13>
     86a:	8a b7       	in	r24, 0x3a	; 58
     86c:	80 68       	ori	r24, 0x80	; 128
     86e:	8a bf       	out	0x3a, r24	; 58
     870:	08 95       	ret
     872:	82 30       	cpi	r24, 0x02	; 2
     874:	19 f4       	brne	.+6      	; 0x87c <__stack+0x1d>
     876:	8a b7       	in	r24, 0x3a	; 58
     878:	80 62       	ori	r24, 0x20	; 32
     87a:	8a bf       	out	0x3a, r24	; 58
     87c:	08 95       	ret

0000087e <EXTI_SetSensitivity>:
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	c8 2f       	mov	r28, r24
     884:	d6 2f       	mov	r29, r22
     886:	0e 94 a5 05 	call	0xb4a	; 0xb4a <GIE_Disable>
     88a:	c3 30       	cpi	r28, 0x03	; 3
     88c:	08 f0       	brcs	.+2      	; 0x890 <EXTI_SetSensitivity+0x12>
     88e:	9a c0       	rjmp	.+308    	; 0x9c4 <EXTI_SetSensitivity+0x146>
     890:	cc 23       	and	r28, r28
     892:	49 f0       	breq	.+18     	; 0x8a6 <EXTI_SetSensitivity+0x28>
     894:	c1 30       	cpi	r28, 0x01	; 1
     896:	61 f0       	breq	.+24     	; 0x8b0 <EXTI_SetSensitivity+0x32>
     898:	c2 30       	cpi	r28, 0x02	; 2
     89a:	79 f0       	breq	.+30     	; 0x8ba <EXTI_SetSensitivity+0x3c>
     89c:	e0 e0       	ldi	r30, 0x00	; 0
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	0e c0       	rjmp	.+28     	; 0x8c2 <EXTI_SetSensitivity+0x44>
     8a6:	e5 e5       	ldi	r30, 0x55	; 85
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	91 e0       	ldi	r25, 0x01	; 1
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	09 c0       	rjmp	.+18     	; 0x8c2 <EXTI_SetSensitivity+0x44>
     8b0:	e5 e5       	ldi	r30, 0x55	; 85
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	93 e0       	ldi	r25, 0x03	; 3
     8b6:	82 e0       	ldi	r24, 0x02	; 2
     8b8:	04 c0       	rjmp	.+8      	; 0x8c2 <EXTI_SetSensitivity+0x44>
     8ba:	e4 e5       	ldi	r30, 0x54	; 84
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	96 e0       	ldi	r25, 0x06	; 6
     8c0:	86 e0       	ldi	r24, 0x06	; 6
     8c2:	c2 30       	cpi	r28, 0x02	; 2
     8c4:	08 f0       	brcs	.+2      	; 0x8c8 <EXTI_SetSensitivity+0x4a>
     8c6:	5e c0       	rjmp	.+188    	; 0x984 <EXTI_SetSensitivity+0x106>
     8c8:	d2 30       	cpi	r29, 0x02	; 2
     8ca:	b9 f4       	brne	.+46     	; 0x8fa <EXTI_SetSensitivity+0x7c>
     8cc:	40 81       	ld	r20, Z
     8ce:	21 e0       	ldi	r18, 0x01	; 1
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	b9 01       	movw	r22, r18
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <EXTI_SetSensitivity+0x5c>
     8d6:	66 0f       	add	r22, r22
     8d8:	77 1f       	adc	r23, r23
     8da:	8a 95       	dec	r24
     8dc:	e2 f7       	brpl	.-8      	; 0x8d6 <EXTI_SetSensitivity+0x58>
     8de:	86 2f       	mov	r24, r22
     8e0:	80 95       	com	r24
     8e2:	84 23       	and	r24, r20
     8e4:	80 83       	st	Z, r24
     8e6:	80 81       	ld	r24, Z
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <EXTI_SetSensitivity+0x70>
     8ea:	22 0f       	add	r18, r18
     8ec:	33 1f       	adc	r19, r19
     8ee:	9a 95       	dec	r25
     8f0:	e2 f7       	brpl	.-8      	; 0x8ea <EXTI_SetSensitivity+0x6c>
     8f2:	20 95       	com	r18
     8f4:	28 23       	and	r18, r24
     8f6:	20 83       	st	Z, r18
     8f8:	65 c0       	rjmp	.+202    	; 0x9c4 <EXTI_SetSensitivity+0x146>
     8fa:	d3 30       	cpi	r29, 0x03	; 3
     8fc:	a9 f4       	brne	.+42     	; 0x928 <EXTI_SetSensitivity+0xaa>
     8fe:	60 81       	ld	r22, Z
     900:	21 e0       	ldi	r18, 0x01	; 1
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	a9 01       	movw	r20, r18
     906:	02 c0       	rjmp	.+4      	; 0x90c <EXTI_SetSensitivity+0x8e>
     908:	44 0f       	add	r20, r20
     90a:	55 1f       	adc	r21, r21
     90c:	8a 95       	dec	r24
     90e:	e2 f7       	brpl	.-8      	; 0x908 <EXTI_SetSensitivity+0x8a>
     910:	46 2b       	or	r20, r22
     912:	40 83       	st	Z, r20
     914:	80 81       	ld	r24, Z
     916:	02 c0       	rjmp	.+4      	; 0x91c <EXTI_SetSensitivity+0x9e>
     918:	22 0f       	add	r18, r18
     91a:	33 1f       	adc	r19, r19
     91c:	9a 95       	dec	r25
     91e:	e2 f7       	brpl	.-8      	; 0x918 <EXTI_SetSensitivity+0x9a>
     920:	20 95       	com	r18
     922:	28 23       	and	r18, r24
     924:	20 83       	st	Z, r18
     926:	4e c0       	rjmp	.+156    	; 0x9c4 <EXTI_SetSensitivity+0x146>
     928:	d1 11       	cpse	r29, r1
     92a:	16 c0       	rjmp	.+44     	; 0x958 <EXTI_SetSensitivity+0xda>
     92c:	40 81       	ld	r20, Z
     92e:	21 e0       	ldi	r18, 0x01	; 1
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	b9 01       	movw	r22, r18
     934:	02 c0       	rjmp	.+4      	; 0x93a <EXTI_SetSensitivity+0xbc>
     936:	66 0f       	add	r22, r22
     938:	77 1f       	adc	r23, r23
     93a:	8a 95       	dec	r24
     93c:	e2 f7       	brpl	.-8      	; 0x936 <EXTI_SetSensitivity+0xb8>
     93e:	86 2f       	mov	r24, r22
     940:	80 95       	com	r24
     942:	84 23       	and	r24, r20
     944:	80 83       	st	Z, r24
     946:	80 81       	ld	r24, Z
     948:	02 c0       	rjmp	.+4      	; 0x94e <EXTI_SetSensitivity+0xd0>
     94a:	22 0f       	add	r18, r18
     94c:	33 1f       	adc	r19, r19
     94e:	9a 95       	dec	r25
     950:	e2 f7       	brpl	.-8      	; 0x94a <EXTI_SetSensitivity+0xcc>
     952:	28 2b       	or	r18, r24
     954:	20 83       	st	Z, r18
     956:	36 c0       	rjmp	.+108    	; 0x9c4 <EXTI_SetSensitivity+0x146>
     958:	d1 30       	cpi	r29, 0x01	; 1
     95a:	a1 f5       	brne	.+104    	; 0x9c4 <EXTI_SetSensitivity+0x146>
     95c:	60 81       	ld	r22, Z
     95e:	21 e0       	ldi	r18, 0x01	; 1
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	a9 01       	movw	r20, r18
     964:	02 c0       	rjmp	.+4      	; 0x96a <EXTI_SetSensitivity+0xec>
     966:	44 0f       	add	r20, r20
     968:	55 1f       	adc	r21, r21
     96a:	8a 95       	dec	r24
     96c:	e2 f7       	brpl	.-8      	; 0x966 <EXTI_SetSensitivity+0xe8>
     96e:	46 2b       	or	r20, r22
     970:	40 83       	st	Z, r20
     972:	80 81       	ld	r24, Z
     974:	02 c0       	rjmp	.+4      	; 0x97a <EXTI_SetSensitivity+0xfc>
     976:	22 0f       	add	r18, r18
     978:	33 1f       	adc	r19, r19
     97a:	9a 95       	dec	r25
     97c:	e2 f7       	brpl	.-8      	; 0x976 <EXTI_SetSensitivity+0xf8>
     97e:	28 2b       	or	r18, r24
     980:	20 83       	st	Z, r18
     982:	20 c0       	rjmp	.+64     	; 0x9c4 <EXTI_SetSensitivity+0x146>
     984:	c2 30       	cpi	r28, 0x02	; 2
     986:	f1 f4       	brne	.+60     	; 0x9c4 <EXTI_SetSensitivity+0x146>
     988:	d1 11       	cpse	r29, r1
     98a:	0e c0       	rjmp	.+28     	; 0x9a8 <EXTI_SetSensitivity+0x12a>
     98c:	40 81       	ld	r20, Z
     98e:	21 e0       	ldi	r18, 0x01	; 1
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	b9 01       	movw	r22, r18
     994:	02 c0       	rjmp	.+4      	; 0x99a <EXTI_SetSensitivity+0x11c>
     996:	66 0f       	add	r22, r22
     998:	77 1f       	adc	r23, r23
     99a:	8a 95       	dec	r24
     99c:	e2 f7       	brpl	.-8      	; 0x996 <EXTI_SetSensitivity+0x118>
     99e:	cb 01       	movw	r24, r22
     9a0:	80 95       	com	r24
     9a2:	84 23       	and	r24, r20
     9a4:	80 83       	st	Z, r24
     9a6:	0e c0       	rjmp	.+28     	; 0x9c4 <EXTI_SetSensitivity+0x146>
     9a8:	d1 30       	cpi	r29, 0x01	; 1
     9aa:	61 f4       	brne	.+24     	; 0x9c4 <EXTI_SetSensitivity+0x146>
     9ac:	40 81       	ld	r20, Z
     9ae:	21 e0       	ldi	r18, 0x01	; 1
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	b9 01       	movw	r22, r18
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <EXTI_SetSensitivity+0x13c>
     9b6:	66 0f       	add	r22, r22
     9b8:	77 1f       	adc	r23, r23
     9ba:	8a 95       	dec	r24
     9bc:	e2 f7       	brpl	.-8      	; 0x9b6 <EXTI_SetSensitivity+0x138>
     9be:	cb 01       	movw	r24, r22
     9c0:	84 2b       	or	r24, r20
     9c2:	80 83       	st	Z, r24
     9c4:	0e 94 a9 05 	call	0xb52	; 0xb52 <GIE_Enable>
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	08 95       	ret

000009ce <ISR_Generic>:
     9ce:	cf 93       	push	r28
     9d0:	c8 2f       	mov	r28, r24
     9d2:	0e 94 a5 05 	call	0xb4a	; 0xb4a <GIE_Disable>
     9d6:	8c 2f       	mov	r24, r28
     9d8:	0e 94 2b 04 	call	0x856	; 0x856 <EXTI_ClearInterruptFlag>
     9dc:	c3 30       	cpi	r28, 0x03	; 3
     9de:	60 f4       	brcc	.+24     	; 0x9f8 <ISR_Generic+0x2a>
     9e0:	ec 2f       	mov	r30, r28
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	ee 0f       	add	r30, r30
     9e6:	ff 1f       	adc	r31, r31
     9e8:	e4 55       	subi	r30, 0x54	; 84
     9ea:	ff 4f       	sbci	r31, 0xFF	; 255
     9ec:	01 90       	ld	r0, Z+
     9ee:	f0 81       	ld	r31, Z
     9f0:	e0 2d       	mov	r30, r0
     9f2:	30 97       	sbiw	r30, 0x00	; 0
     9f4:	09 f0       	breq	.+2      	; 0x9f8 <ISR_Generic+0x2a>
     9f6:	09 95       	icall
     9f8:	0e 94 a9 05 	call	0xb52	; 0xb52 <GIE_Enable>
     9fc:	cf 91       	pop	r28
     9fe:	08 95       	ret

00000a00 <EXTI_Init>:
     a00:	0f 93       	push	r16
     a02:	1f 93       	push	r17
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	c8 2f       	mov	r28, r24
     a0a:	d6 2f       	mov	r29, r22
     a0c:	8a 01       	movw	r16, r20
     a0e:	0e 94 a5 05 	call	0xb4a	; 0xb4a <GIE_Disable>
     a12:	6d 2f       	mov	r22, r29
     a14:	8c 2f       	mov	r24, r28
     a16:	0e 94 3f 04 	call	0x87e	; 0x87e <EXTI_SetSensitivity>
     a1a:	b8 01       	movw	r22, r16
     a1c:	8c 2f       	mov	r24, r28
     a1e:	0e 94 1d 04 	call	0x83a	; 0x83a <EXTI_SetCallback>
     a22:	0e 94 a9 05 	call	0xb52	; 0xb52 <GIE_Enable>
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	1f 91       	pop	r17
     a2c:	0f 91       	pop	r16
     a2e:	08 95       	ret

00000a30 <EXTI_EnableExternalInterrupt>:
     a30:	cf 93       	push	r28
     a32:	c8 2f       	mov	r28, r24
     a34:	0e 94 a5 05 	call	0xb4a	; 0xb4a <GIE_Disable>
     a38:	c3 30       	cpi	r28, 0x03	; 3
     a3a:	a0 f4       	brcc	.+40     	; 0xa64 <EXTI_EnableExternalInterrupt+0x34>
     a3c:	8c 2f       	mov	r24, r28
     a3e:	0e 94 2b 04 	call	0x856	; 0x856 <EXTI_ClearInterruptFlag>
     a42:	c1 11       	cpse	r28, r1
     a44:	04 c0       	rjmp	.+8      	; 0xa4e <EXTI_EnableExternalInterrupt+0x1e>
     a46:	8b b7       	in	r24, 0x3b	; 59
     a48:	80 64       	ori	r24, 0x40	; 64
     a4a:	8b bf       	out	0x3b, r24	; 59
     a4c:	0b c0       	rjmp	.+22     	; 0xa64 <EXTI_EnableExternalInterrupt+0x34>
     a4e:	c1 30       	cpi	r28, 0x01	; 1
     a50:	21 f4       	brne	.+8      	; 0xa5a <EXTI_EnableExternalInterrupt+0x2a>
     a52:	8b b7       	in	r24, 0x3b	; 59
     a54:	80 68       	ori	r24, 0x80	; 128
     a56:	8b bf       	out	0x3b, r24	; 59
     a58:	05 c0       	rjmp	.+10     	; 0xa64 <EXTI_EnableExternalInterrupt+0x34>
     a5a:	c2 30       	cpi	r28, 0x02	; 2
     a5c:	19 f4       	brne	.+6      	; 0xa64 <EXTI_EnableExternalInterrupt+0x34>
     a5e:	8b b7       	in	r24, 0x3b	; 59
     a60:	80 62       	ori	r24, 0x20	; 32
     a62:	8b bf       	out	0x3b, r24	; 59
     a64:	0e 94 a9 05 	call	0xb52	; 0xb52 <GIE_Enable>
     a68:	cf 91       	pop	r28
     a6a:	08 95       	ret

00000a6c <__vector_1>:
    GIE_Enable();
}

/*!< ISR of INT0                      */
void __vector_1(void) __attribute__((signal));
void __vector_1(void) {
     a6c:	1f 92       	push	r1
     a6e:	0f 92       	push	r0
     a70:	0f b6       	in	r0, 0x3f	; 63
     a72:	0f 92       	push	r0
     a74:	11 24       	eor	r1, r1
     a76:	2f 93       	push	r18
     a78:	3f 93       	push	r19
     a7a:	4f 93       	push	r20
     a7c:	5f 93       	push	r21
     a7e:	6f 93       	push	r22
     a80:	7f 93       	push	r23
     a82:	8f 93       	push	r24
     a84:	9f 93       	push	r25
     a86:	af 93       	push	r26
     a88:	bf 93       	push	r27
     a8a:	ef 93       	push	r30
     a8c:	ff 93       	push	r31

    ISR_Generic(EXTI_0);
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	0e 94 e7 04 	call	0x9ce	; 0x9ce <ISR_Generic>
}
     a94:	ff 91       	pop	r31
     a96:	ef 91       	pop	r30
     a98:	bf 91       	pop	r27
     a9a:	af 91       	pop	r26
     a9c:	9f 91       	pop	r25
     a9e:	8f 91       	pop	r24
     aa0:	7f 91       	pop	r23
     aa2:	6f 91       	pop	r22
     aa4:	5f 91       	pop	r21
     aa6:	4f 91       	pop	r20
     aa8:	3f 91       	pop	r19
     aaa:	2f 91       	pop	r18
     aac:	0f 90       	pop	r0
     aae:	0f be       	out	0x3f, r0	; 63
     ab0:	0f 90       	pop	r0
     ab2:	1f 90       	pop	r1
     ab4:	18 95       	reti

00000ab6 <__vector_2>:

/*!< ISR of INT1        */
void __vector_2(void) __attribute__((signal));
void __vector_2(void) {
     ab6:	1f 92       	push	r1
     ab8:	0f 92       	push	r0
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	0f 92       	push	r0
     abe:	11 24       	eor	r1, r1
     ac0:	2f 93       	push	r18
     ac2:	3f 93       	push	r19
     ac4:	4f 93       	push	r20
     ac6:	5f 93       	push	r21
     ac8:	6f 93       	push	r22
     aca:	7f 93       	push	r23
     acc:	8f 93       	push	r24
     ace:	9f 93       	push	r25
     ad0:	af 93       	push	r26
     ad2:	bf 93       	push	r27
     ad4:	ef 93       	push	r30
     ad6:	ff 93       	push	r31
    
    ISR_Generic(EXTI_1);
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	0e 94 e7 04 	call	0x9ce	; 0x9ce <ISR_Generic>
}
     ade:	ff 91       	pop	r31
     ae0:	ef 91       	pop	r30
     ae2:	bf 91       	pop	r27
     ae4:	af 91       	pop	r26
     ae6:	9f 91       	pop	r25
     ae8:	8f 91       	pop	r24
     aea:	7f 91       	pop	r23
     aec:	6f 91       	pop	r22
     aee:	5f 91       	pop	r21
     af0:	4f 91       	pop	r20
     af2:	3f 91       	pop	r19
     af4:	2f 91       	pop	r18
     af6:	0f 90       	pop	r0
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	0f 90       	pop	r0
     afc:	1f 90       	pop	r1
     afe:	18 95       	reti

00000b00 <__vector_3>:

/*!< ISR of INT2                      */
void __vector_3(void) __attribute__((signal));
void __vector_3(void) {
     b00:	1f 92       	push	r1
     b02:	0f 92       	push	r0
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	0f 92       	push	r0
     b08:	11 24       	eor	r1, r1
     b0a:	2f 93       	push	r18
     b0c:	3f 93       	push	r19
     b0e:	4f 93       	push	r20
     b10:	5f 93       	push	r21
     b12:	6f 93       	push	r22
     b14:	7f 93       	push	r23
     b16:	8f 93       	push	r24
     b18:	9f 93       	push	r25
     b1a:	af 93       	push	r26
     b1c:	bf 93       	push	r27
     b1e:	ef 93       	push	r30
     b20:	ff 93       	push	r31
    
    ISR_Generic(EXTI_2);
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	0e 94 e7 04 	call	0x9ce	; 0x9ce <ISR_Generic>
}
     b28:	ff 91       	pop	r31
     b2a:	ef 91       	pop	r30
     b2c:	bf 91       	pop	r27
     b2e:	af 91       	pop	r26
     b30:	9f 91       	pop	r25
     b32:	8f 91       	pop	r24
     b34:	7f 91       	pop	r23
     b36:	6f 91       	pop	r22
     b38:	5f 91       	pop	r21
     b3a:	4f 91       	pop	r20
     b3c:	3f 91       	pop	r19
     b3e:	2f 91       	pop	r18
     b40:	0f 90       	pop	r0
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	0f 90       	pop	r0
     b46:	1f 90       	pop	r1
     b48:	18 95       	reti

00000b4a <GIE_Disable>:
#include "../../LIB/BIT_MATH.h"
#include "GIE_reg.h"
#include "GIE.h"

void GIE_Disable(void) {
    BIT_CLR(SREG, I_BIT);
     b4a:	8f b7       	in	r24, 0x3f	; 63
     b4c:	8f 77       	andi	r24, 0x7F	; 127
     b4e:	8f bf       	out	0x3f, r24	; 63
     b50:	08 95       	ret

00000b52 <GIE_Enable>:
}

void GIE_Enable(void) {
    BIT_SET(SREG, I_BIT);
     b52:	8f b7       	in	r24, 0x3f	; 63
     b54:	80 68       	ori	r24, 0x80	; 128
     b56:	8f bf       	out	0x3f, r24	; 63
     b58:	08 95       	ret

00000b5a <TIMER0_ConfigClock>:
            TIMER1_SetCompareValue(u16_tOcr, TIMER_OCB);
            break;
        case PWM_3:
            u16_tTop = TIMER2_GetTop();
            u16_tOcr = (u16_t)( ((u32_t)u16_tTop * u8DutyCyclePercentage) / 100 );
            TIMER2_SetCompareValue(u16_tOcr);
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	8a 30       	cpi	r24, 0x0A	; 10
     b5e:	91 05       	cpc	r25, r1
     b60:	08 f0       	brcs	.+2      	; 0xb64 <TIMER0_ConfigClock+0xa>
     b62:	54 c0       	rjmp	.+168    	; 0xc0c <TIMER0_ConfigClock+0xb2>
     b64:	fc 01       	movw	r30, r24
     b66:	ef 5c       	subi	r30, 0xCF	; 207
     b68:	ff 4f       	sbci	r31, 0xFF	; 255
     b6a:	0c 94 48 09 	jmp	0x1290	; 0x1290 <__tablejump2__>
     b6e:	83 b7       	in	r24, 0x33	; 51
     b70:	8e 7f       	andi	r24, 0xFE	; 254
     b72:	83 bf       	out	0x33, r24	; 51
     b74:	83 b7       	in	r24, 0x33	; 51
     b76:	8d 7f       	andi	r24, 0xFD	; 253
     b78:	83 bf       	out	0x33, r24	; 51
     b7a:	83 b7       	in	r24, 0x33	; 51
     b7c:	8b 7f       	andi	r24, 0xFB	; 251
     b7e:	83 bf       	out	0x33, r24	; 51
     b80:	08 95       	ret
     b82:	83 b7       	in	r24, 0x33	; 51
     b84:	81 60       	ori	r24, 0x01	; 1
     b86:	83 bf       	out	0x33, r24	; 51
     b88:	83 b7       	in	r24, 0x33	; 51
     b8a:	8d 7f       	andi	r24, 0xFD	; 253
     b8c:	83 bf       	out	0x33, r24	; 51
     b8e:	83 b7       	in	r24, 0x33	; 51
     b90:	8b 7f       	andi	r24, 0xFB	; 251
     b92:	83 bf       	out	0x33, r24	; 51
     b94:	08 95       	ret
     b96:	83 b7       	in	r24, 0x33	; 51
     b98:	8e 7f       	andi	r24, 0xFE	; 254
     b9a:	83 bf       	out	0x33, r24	; 51
     b9c:	83 b7       	in	r24, 0x33	; 51
     b9e:	82 60       	ori	r24, 0x02	; 2
     ba0:	83 bf       	out	0x33, r24	; 51
     ba2:	83 b7       	in	r24, 0x33	; 51
     ba4:	8b 7f       	andi	r24, 0xFB	; 251
     ba6:	83 bf       	out	0x33, r24	; 51
     ba8:	08 95       	ret
     baa:	83 b7       	in	r24, 0x33	; 51
     bac:	81 60       	ori	r24, 0x01	; 1
     bae:	83 bf       	out	0x33, r24	; 51
     bb0:	83 b7       	in	r24, 0x33	; 51
     bb2:	82 60       	ori	r24, 0x02	; 2
     bb4:	83 bf       	out	0x33, r24	; 51
     bb6:	83 b7       	in	r24, 0x33	; 51
     bb8:	8b 7f       	andi	r24, 0xFB	; 251
     bba:	83 bf       	out	0x33, r24	; 51
     bbc:	08 95       	ret
     bbe:	83 b7       	in	r24, 0x33	; 51
     bc0:	8e 7f       	andi	r24, 0xFE	; 254
     bc2:	83 bf       	out	0x33, r24	; 51
     bc4:	83 b7       	in	r24, 0x33	; 51
     bc6:	8d 7f       	andi	r24, 0xFD	; 253
     bc8:	83 bf       	out	0x33, r24	; 51
     bca:	83 b7       	in	r24, 0x33	; 51
     bcc:	84 60       	ori	r24, 0x04	; 4
     bce:	83 bf       	out	0x33, r24	; 51
     bd0:	08 95       	ret
     bd2:	83 b7       	in	r24, 0x33	; 51
     bd4:	81 60       	ori	r24, 0x01	; 1
     bd6:	83 bf       	out	0x33, r24	; 51
     bd8:	83 b7       	in	r24, 0x33	; 51
     bda:	8d 7f       	andi	r24, 0xFD	; 253
     bdc:	83 bf       	out	0x33, r24	; 51
     bde:	83 b7       	in	r24, 0x33	; 51
     be0:	84 60       	ori	r24, 0x04	; 4
     be2:	83 bf       	out	0x33, r24	; 51
     be4:	08 95       	ret
     be6:	83 b7       	in	r24, 0x33	; 51
     be8:	8e 7f       	andi	r24, 0xFE	; 254
     bea:	83 bf       	out	0x33, r24	; 51
     bec:	83 b7       	in	r24, 0x33	; 51
     bee:	82 60       	ori	r24, 0x02	; 2
     bf0:	83 bf       	out	0x33, r24	; 51
     bf2:	83 b7       	in	r24, 0x33	; 51
     bf4:	84 60       	ori	r24, 0x04	; 4
     bf6:	83 bf       	out	0x33, r24	; 51
     bf8:	08 95       	ret
     bfa:	83 b7       	in	r24, 0x33	; 51
     bfc:	81 60       	ori	r24, 0x01	; 1
     bfe:	83 bf       	out	0x33, r24	; 51
     c00:	83 b7       	in	r24, 0x33	; 51
     c02:	82 60       	ori	r24, 0x02	; 2
     c04:	83 bf       	out	0x33, r24	; 51
     c06:	83 b7       	in	r24, 0x33	; 51
     c08:	84 60       	ori	r24, 0x04	; 4
     c0a:	83 bf       	out	0x33, r24	; 51
     c0c:	08 95       	ret

00000c0e <TIMER0_ConfigMode>:
     c0e:	81 30       	cpi	r24, 0x01	; 1
     c10:	81 f0       	breq	.+32     	; 0xc32 <TIMER0_ConfigMode+0x24>
     c12:	28 f0       	brcs	.+10     	; 0xc1e <TIMER0_ConfigMode+0x10>
     c14:	84 30       	cpi	r24, 0x04	; 4
     c16:	b9 f0       	breq	.+46     	; 0xc46 <TIMER0_ConfigMode+0x38>
     c18:	8a 30       	cpi	r24, 0x0A	; 10
     c1a:	e1 f0       	breq	.+56     	; 0xc54 <TIMER0_ConfigMode+0x46>
     c1c:	08 95       	ret
     c1e:	83 b7       	in	r24, 0x33	; 51
     c20:	8f 7b       	andi	r24, 0xBF	; 191
     c22:	83 bf       	out	0x33, r24	; 51
     c24:	83 b7       	in	r24, 0x33	; 51
     c26:	87 7f       	andi	r24, 0xF7	; 247
     c28:	83 bf       	out	0x33, r24	; 51
     c2a:	83 b7       	in	r24, 0x33	; 51
     c2c:	80 68       	ori	r24, 0x80	; 128
     c2e:	83 bf       	out	0x33, r24	; 51
     c30:	08 95       	ret
     c32:	83 b7       	in	r24, 0x33	; 51
     c34:	8f 7b       	andi	r24, 0xBF	; 191
     c36:	83 bf       	out	0x33, r24	; 51
     c38:	83 b7       	in	r24, 0x33	; 51
     c3a:	88 60       	ori	r24, 0x08	; 8
     c3c:	83 bf       	out	0x33, r24	; 51
     c3e:	83 b7       	in	r24, 0x33	; 51
     c40:	80 68       	ori	r24, 0x80	; 128
     c42:	83 bf       	out	0x33, r24	; 51
     c44:	08 95       	ret
     c46:	83 b7       	in	r24, 0x33	; 51
     c48:	80 64       	ori	r24, 0x40	; 64
     c4a:	83 bf       	out	0x33, r24	; 51
     c4c:	83 b7       	in	r24, 0x33	; 51
     c4e:	88 60       	ori	r24, 0x08	; 8
     c50:	83 bf       	out	0x33, r24	; 51
     c52:	08 95       	ret
     c54:	83 b7       	in	r24, 0x33	; 51
     c56:	80 64       	ori	r24, 0x40	; 64
     c58:	83 bf       	out	0x33, r24	; 51
     c5a:	83 b7       	in	r24, 0x33	; 51
     c5c:	87 7f       	andi	r24, 0xF7	; 247
     c5e:	83 bf       	out	0x33, r24	; 51
     c60:	08 95       	ret

00000c62 <TIMER0_ConfigOC>:
     c62:	61 30       	cpi	r22, 0x01	; 1
     c64:	69 f0       	breq	.+26     	; 0xc80 <TIMER0_ConfigOC+0x1e>
     c66:	28 f0       	brcs	.+10     	; 0xc72 <TIMER0_ConfigOC+0x10>
     c68:	62 30       	cpi	r22, 0x02	; 2
     c6a:	99 f0       	breq	.+38     	; 0xc92 <TIMER0_ConfigOC+0x30>
     c6c:	63 30       	cpi	r22, 0x03	; 3
     c6e:	c1 f0       	breq	.+48     	; 0xca0 <TIMER0_ConfigOC+0x3e>
     c70:	08 95       	ret
     c72:	83 b7       	in	r24, 0x33	; 51
     c74:	8f 7e       	andi	r24, 0xEF	; 239
     c76:	83 bf       	out	0x33, r24	; 51
     c78:	83 b7       	in	r24, 0x33	; 51
     c7a:	8f 7d       	andi	r24, 0xDF	; 223
     c7c:	83 bf       	out	0x33, r24	; 51
     c7e:	08 95       	ret
     c80:	82 30       	cpi	r24, 0x02	; 2
     c82:	a0 f4       	brcc	.+40     	; 0xcac <TIMER0_ConfigOC+0x4a>
     c84:	83 b7       	in	r24, 0x33	; 51
     c86:	80 61       	ori	r24, 0x10	; 16
     c88:	83 bf       	out	0x33, r24	; 51
     c8a:	83 b7       	in	r24, 0x33	; 51
     c8c:	8f 7d       	andi	r24, 0xDF	; 223
     c8e:	83 bf       	out	0x33, r24	; 51
     c90:	08 95       	ret
     c92:	83 b7       	in	r24, 0x33	; 51
     c94:	8f 7e       	andi	r24, 0xEF	; 239
     c96:	83 bf       	out	0x33, r24	; 51
     c98:	83 b7       	in	r24, 0x33	; 51
     c9a:	80 62       	ori	r24, 0x20	; 32
     c9c:	83 bf       	out	0x33, r24	; 51
     c9e:	08 95       	ret
     ca0:	83 b7       	in	r24, 0x33	; 51
     ca2:	80 61       	ori	r24, 0x10	; 16
     ca4:	83 bf       	out	0x33, r24	; 51
     ca6:	83 b7       	in	r24, 0x33	; 51
     ca8:	80 62       	ori	r24, 0x20	; 32
     caa:	83 bf       	out	0x33, r24	; 51
     cac:	08 95       	ret

00000cae <TIMER0_Disable>:
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	0e 94 ad 05 	call	0xb5a	; 0xb5a <TIMER0_ConfigClock>
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	0e 94 31 06 	call	0xc62	; 0xc62 <TIMER0_ConfigOC>
     cbc:	08 95       	ret

00000cbe <TIMER0_SetTimer>:
     cbe:	82 bf       	out	0x32, r24	; 50
     cc0:	08 95       	ret

00000cc2 <TIMER0_Init>:
     cc2:	1f 93       	push	r17
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	16 2f       	mov	r17, r22
     cca:	c4 2f       	mov	r28, r20
     ccc:	d2 2f       	mov	r29, r18
     cce:	0e 94 5f 06 	call	0xcbe	; 0xcbe <TIMER0_SetTimer>
     cd2:	81 2f       	mov	r24, r17
     cd4:	0e 94 ad 05 	call	0xb5a	; 0xb5a <TIMER0_ConfigClock>
     cd8:	8c 2f       	mov	r24, r28
     cda:	0e 94 07 06 	call	0xc0e	; 0xc0e <TIMER0_ConfigMode>
     cde:	6d 2f       	mov	r22, r29
     ce0:	8c 2f       	mov	r24, r28
     ce2:	0e 94 31 06 	call	0xc62	; 0xc62 <TIMER0_ConfigOC>
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	1f 91       	pop	r17
     cec:	08 95       	ret

00000cee <TIMER_DelayMs>:
     cee:	cf 92       	push	r12
     cf0:	df 92       	push	r13
     cf2:	ef 92       	push	r14
     cf4:	ff 92       	push	r15
     cf6:	0e 94 b9 08 	call	0x1172	; 0x1172 <__floatundisf>
     cfa:	2f e6       	ldi	r18, 0x6F	; 111
     cfc:	32 e1       	ldi	r19, 0x12	; 18
     cfe:	43 e8       	ldi	r20, 0x83	; 131
     d00:	5c e3       	ldi	r21, 0x3C	; 60
     d02:	0e 94 18 08 	call	0x1030	; 0x1030 <__divsf3>
     d06:	0e 94 8a 08 	call	0x1114	; 0x1114 <__fixunssfsi>
     d0a:	6b 01       	movw	r12, r22
     d0c:	7c 01       	movw	r14, r24
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	40 e0       	ldi	r20, 0x00	; 0
     d12:	61 e0       	ldi	r22, 0x01	; 1
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	0e 94 61 06 	call	0xcc2	; 0xcc2 <TIMER0_Init>
     d1a:	40 e0       	ldi	r20, 0x00	; 0
     d1c:	50 e0       	ldi	r21, 0x00	; 0
     d1e:	ba 01       	movw	r22, r20
     d20:	0a c0       	rjmp	.+20     	; 0xd36 <TIMER_DelayMs+0x48>
     d22:	08 b6       	in	r0, 0x38	; 56
     d24:	00 fe       	sbrs	r0, 0
     d26:	fd cf       	rjmp	.-6      	; 0xd22 <TIMER_DelayMs+0x34>
     d28:	88 b7       	in	r24, 0x38	; 56
     d2a:	81 60       	ori	r24, 0x01	; 1
     d2c:	88 bf       	out	0x38, r24	; 56
     d2e:	4f 5f       	subi	r20, 0xFF	; 255
     d30:	5f 4f       	sbci	r21, 0xFF	; 255
     d32:	6f 4f       	sbci	r22, 0xFF	; 255
     d34:	7f 4f       	sbci	r23, 0xFF	; 255
     d36:	4c 15       	cp	r20, r12
     d38:	5d 05       	cpc	r21, r13
     d3a:	6e 05       	cpc	r22, r14
     d3c:	7f 05       	cpc	r23, r15
     d3e:	88 f3       	brcs	.-30     	; 0xd22 <TIMER_DelayMs+0x34>
     d40:	0e 94 57 06 	call	0xcae	; 0xcae <TIMER0_Disable>
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	ff 90       	pop	r15
     d48:	ef 90       	pop	r14
     d4a:	df 90       	pop	r13
     d4c:	cf 90       	pop	r12
     d4e:	08 95       	ret

00000d50 <__vector_11>:
/*                                                                           */
/*---------------------------------------------------------------------------*/

/* ISR of TIMER0 Overflow */
void __vector_11(void) __attribute__((signal));
void __vector_11(void) {
     d50:	1f 92       	push	r1
     d52:	0f 92       	push	r0
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	0f 92       	push	r0
     d58:	11 24       	eor	r1, r1
     d5a:	2f 93       	push	r18
     d5c:	3f 93       	push	r19
     d5e:	4f 93       	push	r20
     d60:	5f 93       	push	r21
     d62:	6f 93       	push	r22
     d64:	7f 93       	push	r23
     d66:	8f 93       	push	r24
     d68:	9f 93       	push	r25
     d6a:	af 93       	push	r26
     d6c:	bf 93       	push	r27
     d6e:	ef 93       	push	r30
     d70:	ff 93       	push	r31
    GIE_Disable();
     d72:	0e 94 a5 05 	call	0xb4a	; 0xb4a <GIE_Disable>

    TIMER0_OVF_CBK_PTR();
     d76:	e0 91 c0 00 	lds	r30, 0x00C0	; 0x8000c0 <TIMER0_OVF_CBK_PTR>
     d7a:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <TIMER0_OVF_CBK_PTR+0x1>
     d7e:	09 95       	icall

    BIT_SET(TIMER_u8_tTIFR_REG, TOV0);    /*!< Clear the interrupt flag */
     d80:	88 b7       	in	r24, 0x38	; 56
     d82:	81 60       	ori	r24, 0x01	; 1
     d84:	88 bf       	out	0x38, r24	; 56

    GIE_Enable();
     d86:	0e 94 a9 05 	call	0xb52	; 0xb52 <GIE_Enable>
}
     d8a:	ff 91       	pop	r31
     d8c:	ef 91       	pop	r30
     d8e:	bf 91       	pop	r27
     d90:	af 91       	pop	r26
     d92:	9f 91       	pop	r25
     d94:	8f 91       	pop	r24
     d96:	7f 91       	pop	r23
     d98:	6f 91       	pop	r22
     d9a:	5f 91       	pop	r21
     d9c:	4f 91       	pop	r20
     d9e:	3f 91       	pop	r19
     da0:	2f 91       	pop	r18
     da2:	0f 90       	pop	r0
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	0f 90       	pop	r0
     da8:	1f 90       	pop	r1
     daa:	18 95       	reti

00000dac <__vector_10>:

/* ISR of TIMER0 Compare Match */
void __vector_10(void) __attribute__((signal));
void __vector_10(void) {
     dac:	1f 92       	push	r1
     dae:	0f 92       	push	r0
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	0f 92       	push	r0
     db4:	11 24       	eor	r1, r1
     db6:	2f 93       	push	r18
     db8:	3f 93       	push	r19
     dba:	4f 93       	push	r20
     dbc:	5f 93       	push	r21
     dbe:	6f 93       	push	r22
     dc0:	7f 93       	push	r23
     dc2:	8f 93       	push	r24
     dc4:	9f 93       	push	r25
     dc6:	af 93       	push	r26
     dc8:	bf 93       	push	r27
     dca:	ef 93       	push	r30
     dcc:	ff 93       	push	r31
    GIE_Disable();
     dce:	0e 94 a5 05 	call	0xb4a	; 0xb4a <GIE_Disable>

    TIMER0_COMP_CBK_PTR();
     dd2:	e0 91 be 00 	lds	r30, 0x00BE	; 0x8000be <TIMER0_COMP_CBK_PTR>
     dd6:	f0 91 bf 00 	lds	r31, 0x00BF	; 0x8000bf <TIMER0_COMP_CBK_PTR+0x1>
     dda:	09 95       	icall

    BIT_SET(TIMER_u8_tTIFR_REG, OCF0);    /*!< Clear the interrupt flag */
     ddc:	88 b7       	in	r24, 0x38	; 56
     dde:	82 60       	ori	r24, 0x02	; 2
     de0:	88 bf       	out	0x38, r24	; 56

    GIE_Enable();
     de2:	0e 94 a9 05 	call	0xb52	; 0xb52 <GIE_Enable>
}
     de6:	ff 91       	pop	r31
     de8:	ef 91       	pop	r30
     dea:	bf 91       	pop	r27
     dec:	af 91       	pop	r26
     dee:	9f 91       	pop	r25
     df0:	8f 91       	pop	r24
     df2:	7f 91       	pop	r23
     df4:	6f 91       	pop	r22
     df6:	5f 91       	pop	r21
     df8:	4f 91       	pop	r20
     dfa:	3f 91       	pop	r19
     dfc:	2f 91       	pop	r18
     dfe:	0f 90       	pop	r0
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	0f 90       	pop	r0
     e04:	1f 90       	pop	r1
     e06:	18 95       	reti

00000e08 <__vector_9>:

/* ISR of TIMER1 Overflow */
void __vector_9(void) __attribute__((signal));
void __vector_9(void) {
     e08:	1f 92       	push	r1
     e0a:	0f 92       	push	r0
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	0f 92       	push	r0
     e10:	11 24       	eor	r1, r1
     e12:	2f 93       	push	r18
     e14:	3f 93       	push	r19
     e16:	4f 93       	push	r20
     e18:	5f 93       	push	r21
     e1a:	6f 93       	push	r22
     e1c:	7f 93       	push	r23
     e1e:	8f 93       	push	r24
     e20:	9f 93       	push	r25
     e22:	af 93       	push	r26
     e24:	bf 93       	push	r27
     e26:	ef 93       	push	r30
     e28:	ff 93       	push	r31
    GIE_Disable();
     e2a:	0e 94 a5 05 	call	0xb4a	; 0xb4a <GIE_Disable>

    TIMER1_OVF_CBK_PTR();
     e2e:	e0 91 bc 00 	lds	r30, 0x00BC	; 0x8000bc <TIMER1_OVF_CBK_PTR>
     e32:	f0 91 bd 00 	lds	r31, 0x00BD	; 0x8000bd <TIMER1_OVF_CBK_PTR+0x1>
     e36:	09 95       	icall

    BIT_SET(TIMER_u8_tTIFR_REG, TOV1);    /*!< Clear the interrupt flag */
     e38:	88 b7       	in	r24, 0x38	; 56
     e3a:	84 60       	ori	r24, 0x04	; 4
     e3c:	88 bf       	out	0x38, r24	; 56

    GIE_Enable();
     e3e:	0e 94 a9 05 	call	0xb52	; 0xb52 <GIE_Enable>
}
     e42:	ff 91       	pop	r31
     e44:	ef 91       	pop	r30
     e46:	bf 91       	pop	r27
     e48:	af 91       	pop	r26
     e4a:	9f 91       	pop	r25
     e4c:	8f 91       	pop	r24
     e4e:	7f 91       	pop	r23
     e50:	6f 91       	pop	r22
     e52:	5f 91       	pop	r21
     e54:	4f 91       	pop	r20
     e56:	3f 91       	pop	r19
     e58:	2f 91       	pop	r18
     e5a:	0f 90       	pop	r0
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	0f 90       	pop	r0
     e60:	1f 90       	pop	r1
     e62:	18 95       	reti

00000e64 <__vector_8>:

/* ISR of TIMER1 Compare Match B */
void __vector_8(void) __attribute__((signal));
void __vector_8(void) {
     e64:	1f 92       	push	r1
     e66:	0f 92       	push	r0
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	0f 92       	push	r0
     e6c:	11 24       	eor	r1, r1
     e6e:	2f 93       	push	r18
     e70:	3f 93       	push	r19
     e72:	4f 93       	push	r20
     e74:	5f 93       	push	r21
     e76:	6f 93       	push	r22
     e78:	7f 93       	push	r23
     e7a:	8f 93       	push	r24
     e7c:	9f 93       	push	r25
     e7e:	af 93       	push	r26
     e80:	bf 93       	push	r27
     e82:	ef 93       	push	r30
     e84:	ff 93       	push	r31
    GIE_Disable();
     e86:	0e 94 a5 05 	call	0xb4a	; 0xb4a <GIE_Disable>

    TIMER1_COMPB_CBK_PTR();
     e8a:	e0 91 b8 00 	lds	r30, 0x00B8	; 0x8000b8 <TIMER1_COMPB_CBK_PTR>
     e8e:	f0 91 b9 00 	lds	r31, 0x00B9	; 0x8000b9 <TIMER1_COMPB_CBK_PTR+0x1>
     e92:	09 95       	icall

    BIT_SET(TIMER_u8_tTIFR_REG, OCF1B);   /*!< Clear the interrupt flag */
     e94:	88 b7       	in	r24, 0x38	; 56
     e96:	88 60       	ori	r24, 0x08	; 8
     e98:	88 bf       	out	0x38, r24	; 56

    GIE_Enable();
     e9a:	0e 94 a9 05 	call	0xb52	; 0xb52 <GIE_Enable>
}
     e9e:	ff 91       	pop	r31
     ea0:	ef 91       	pop	r30
     ea2:	bf 91       	pop	r27
     ea4:	af 91       	pop	r26
     ea6:	9f 91       	pop	r25
     ea8:	8f 91       	pop	r24
     eaa:	7f 91       	pop	r23
     eac:	6f 91       	pop	r22
     eae:	5f 91       	pop	r21
     eb0:	4f 91       	pop	r20
     eb2:	3f 91       	pop	r19
     eb4:	2f 91       	pop	r18
     eb6:	0f 90       	pop	r0
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	0f 90       	pop	r0
     ebc:	1f 90       	pop	r1
     ebe:	18 95       	reti

00000ec0 <__vector_7>:

/* ISR of TIMER1 Compare Match A */
void __vector_7(void) __attribute__((signal));
void __vector_7(void) {
     ec0:	1f 92       	push	r1
     ec2:	0f 92       	push	r0
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	0f 92       	push	r0
     ec8:	11 24       	eor	r1, r1
     eca:	2f 93       	push	r18
     ecc:	3f 93       	push	r19
     ece:	4f 93       	push	r20
     ed0:	5f 93       	push	r21
     ed2:	6f 93       	push	r22
     ed4:	7f 93       	push	r23
     ed6:	8f 93       	push	r24
     ed8:	9f 93       	push	r25
     eda:	af 93       	push	r26
     edc:	bf 93       	push	r27
     ede:	ef 93       	push	r30
     ee0:	ff 93       	push	r31
    GIE_Disable();
     ee2:	0e 94 a5 05 	call	0xb4a	; 0xb4a <GIE_Disable>

    TIMER1_COMPA_CBK_PTR();
     ee6:	e0 91 ba 00 	lds	r30, 0x00BA	; 0x8000ba <TIMER1_COMPA_CBK_PTR>
     eea:	f0 91 bb 00 	lds	r31, 0x00BB	; 0x8000bb <TIMER1_COMPA_CBK_PTR+0x1>
     eee:	09 95       	icall

    BIT_SET(TIMER_u8_tTIFR_REG, OCF1A);   /*!< Clear the interrupt flag */
     ef0:	88 b7       	in	r24, 0x38	; 56
     ef2:	80 61       	ori	r24, 0x10	; 16
     ef4:	88 bf       	out	0x38, r24	; 56

    GIE_Enable();
     ef6:	0e 94 a9 05 	call	0xb52	; 0xb52 <GIE_Enable>
}
     efa:	ff 91       	pop	r31
     efc:	ef 91       	pop	r30
     efe:	bf 91       	pop	r27
     f00:	af 91       	pop	r26
     f02:	9f 91       	pop	r25
     f04:	8f 91       	pop	r24
     f06:	7f 91       	pop	r23
     f08:	6f 91       	pop	r22
     f0a:	5f 91       	pop	r21
     f0c:	4f 91       	pop	r20
     f0e:	3f 91       	pop	r19
     f10:	2f 91       	pop	r18
     f12:	0f 90       	pop	r0
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	0f 90       	pop	r0
     f18:	1f 90       	pop	r1
     f1a:	18 95       	reti

00000f1c <__vector_6>:

/* ISR of TIMER1 Capture Event */
void __vector_6(void) __attribute__((signal));
void __vector_6(void) {
     f1c:	1f 92       	push	r1
     f1e:	0f 92       	push	r0
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	0f 92       	push	r0
     f24:	11 24       	eor	r1, r1
     f26:	2f 93       	push	r18
     f28:	3f 93       	push	r19
     f2a:	4f 93       	push	r20
     f2c:	5f 93       	push	r21
     f2e:	6f 93       	push	r22
     f30:	7f 93       	push	r23
     f32:	8f 93       	push	r24
     f34:	9f 93       	push	r25
     f36:	af 93       	push	r26
     f38:	bf 93       	push	r27
     f3a:	ef 93       	push	r30
     f3c:	ff 93       	push	r31
    GIE_Disable();
     f3e:	0e 94 a5 05 	call	0xb4a	; 0xb4a <GIE_Disable>

    TIMER1_CAPT_CBK_PTR();
     f42:	e0 91 b6 00 	lds	r30, 0x00B6	; 0x8000b6 <TIMER1_CAPT_CBK_PTR>
     f46:	f0 91 b7 00 	lds	r31, 0x00B7	; 0x8000b7 <TIMER1_CAPT_CBK_PTR+0x1>
     f4a:	09 95       	icall

    BIT_SET(TIMER_u8_tTIFR_REG, ICF1);    /*!< Clear the interrupt flag */
     f4c:	88 b7       	in	r24, 0x38	; 56
     f4e:	80 62       	ori	r24, 0x20	; 32
     f50:	88 bf       	out	0x38, r24	; 56

    GIE_Enable();
     f52:	0e 94 a9 05 	call	0xb52	; 0xb52 <GIE_Enable>
}
     f56:	ff 91       	pop	r31
     f58:	ef 91       	pop	r30
     f5a:	bf 91       	pop	r27
     f5c:	af 91       	pop	r26
     f5e:	9f 91       	pop	r25
     f60:	8f 91       	pop	r24
     f62:	7f 91       	pop	r23
     f64:	6f 91       	pop	r22
     f66:	5f 91       	pop	r21
     f68:	4f 91       	pop	r20
     f6a:	3f 91       	pop	r19
     f6c:	2f 91       	pop	r18
     f6e:	0f 90       	pop	r0
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	0f 90       	pop	r0
     f74:	1f 90       	pop	r1
     f76:	18 95       	reti

00000f78 <__vector_5>:

/* ISR of TIMER2 Overflow */
void __vector_5(void) __attribute__((signal));
void __vector_5(void) {
     f78:	1f 92       	push	r1
     f7a:	0f 92       	push	r0
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	0f 92       	push	r0
     f80:	11 24       	eor	r1, r1
     f82:	2f 93       	push	r18
     f84:	3f 93       	push	r19
     f86:	4f 93       	push	r20
     f88:	5f 93       	push	r21
     f8a:	6f 93       	push	r22
     f8c:	7f 93       	push	r23
     f8e:	8f 93       	push	r24
     f90:	9f 93       	push	r25
     f92:	af 93       	push	r26
     f94:	bf 93       	push	r27
     f96:	ef 93       	push	r30
     f98:	ff 93       	push	r31
    GIE_Disable();
     f9a:	0e 94 a5 05 	call	0xb4a	; 0xb4a <GIE_Disable>

    TIMER2_OVF_CBK_PTR();
     f9e:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <TIMER2_OVF_CBK_PTR>
     fa2:	f0 91 b5 00 	lds	r31, 0x00B5	; 0x8000b5 <TIMER2_OVF_CBK_PTR+0x1>
     fa6:	09 95       	icall

    BIT_SET(TIMER_u8_tTIFR_REG, TOV2);    /*!< Clear the interrupt flag */
     fa8:	88 b7       	in	r24, 0x38	; 56
     faa:	80 64       	ori	r24, 0x40	; 64
     fac:	88 bf       	out	0x38, r24	; 56

    GIE_Enable();
     fae:	0e 94 a9 05 	call	0xb52	; 0xb52 <GIE_Enable>
}
     fb2:	ff 91       	pop	r31
     fb4:	ef 91       	pop	r30
     fb6:	bf 91       	pop	r27
     fb8:	af 91       	pop	r26
     fba:	9f 91       	pop	r25
     fbc:	8f 91       	pop	r24
     fbe:	7f 91       	pop	r23
     fc0:	6f 91       	pop	r22
     fc2:	5f 91       	pop	r21
     fc4:	4f 91       	pop	r20
     fc6:	3f 91       	pop	r19
     fc8:	2f 91       	pop	r18
     fca:	0f 90       	pop	r0
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	0f 90       	pop	r0
     fd0:	1f 90       	pop	r1
     fd2:	18 95       	reti

00000fd4 <__vector_4>:

/* ISR of TIMER2 Compare Match */
void __vector_4(void) __attribute__((signal));
void __vector_4(void) {
     fd4:	1f 92       	push	r1
     fd6:	0f 92       	push	r0
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	0f 92       	push	r0
     fdc:	11 24       	eor	r1, r1
     fde:	2f 93       	push	r18
     fe0:	3f 93       	push	r19
     fe2:	4f 93       	push	r20
     fe4:	5f 93       	push	r21
     fe6:	6f 93       	push	r22
     fe8:	7f 93       	push	r23
     fea:	8f 93       	push	r24
     fec:	9f 93       	push	r25
     fee:	af 93       	push	r26
     ff0:	bf 93       	push	r27
     ff2:	ef 93       	push	r30
     ff4:	ff 93       	push	r31
    GIE_Disable();
     ff6:	0e 94 a5 05 	call	0xb4a	; 0xb4a <GIE_Disable>

    TIMER2_COMP_CBK_PTR();
     ffa:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <TIMER2_COMP_CBK_PTR>
     ffe:	f0 91 b3 00 	lds	r31, 0x00B3	; 0x8000b3 <TIMER2_COMP_CBK_PTR+0x1>
    1002:	09 95       	icall

    BIT_SET(TIMER_u8_tTIFR_REG, OCF2);    /*!< Clear the interrupt flag */
    1004:	88 b7       	in	r24, 0x38	; 56
    1006:	80 68       	ori	r24, 0x80	; 128
    1008:	88 bf       	out	0x38, r24	; 56

    GIE_Enable();
    100a:	0e 94 a9 05 	call	0xb52	; 0xb52 <GIE_Enable>
}
    100e:	ff 91       	pop	r31
    1010:	ef 91       	pop	r30
    1012:	bf 91       	pop	r27
    1014:	af 91       	pop	r26
    1016:	9f 91       	pop	r25
    1018:	8f 91       	pop	r24
    101a:	7f 91       	pop	r23
    101c:	6f 91       	pop	r22
    101e:	5f 91       	pop	r21
    1020:	4f 91       	pop	r20
    1022:	3f 91       	pop	r19
    1024:	2f 91       	pop	r18
    1026:	0f 90       	pop	r0
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	0f 90       	pop	r0
    102c:	1f 90       	pop	r1
    102e:	18 95       	reti

00001030 <__divsf3>:
    1030:	0e 94 2c 08 	call	0x1058	; 0x1058 <__divsf3x>
    1034:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_round>
    1038:	0e 94 07 09 	call	0x120e	; 0x120e <__fp_pscB>
    103c:	58 f0       	brcs	.+22     	; 0x1054 <__divsf3+0x24>
    103e:	0e 94 00 09 	call	0x1200	; 0x1200 <__fp_pscA>
    1042:	40 f0       	brcs	.+16     	; 0x1054 <__divsf3+0x24>
    1044:	29 f4       	brne	.+10     	; 0x1050 <__divsf3+0x20>
    1046:	5f 3f       	cpi	r21, 0xFF	; 255
    1048:	29 f0       	breq	.+10     	; 0x1054 <__divsf3+0x24>
    104a:	0c 94 f7 08 	jmp	0x11ee	; 0x11ee <__fp_inf>
    104e:	51 11       	cpse	r21, r1
    1050:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__fp_szero>
    1054:	0c 94 fd 08 	jmp	0x11fa	; 0x11fa <__fp_nan>

00001058 <__divsf3x>:
    1058:	0e 94 1f 09 	call	0x123e	; 0x123e <__fp_split3>
    105c:	68 f3       	brcs	.-38     	; 0x1038 <__divsf3+0x8>

0000105e <__divsf3_pse>:
    105e:	99 23       	and	r25, r25
    1060:	b1 f3       	breq	.-20     	; 0x104e <__divsf3+0x1e>
    1062:	55 23       	and	r21, r21
    1064:	91 f3       	breq	.-28     	; 0x104a <__divsf3+0x1a>
    1066:	95 1b       	sub	r25, r21
    1068:	55 0b       	sbc	r21, r21
    106a:	bb 27       	eor	r27, r27
    106c:	aa 27       	eor	r26, r26
    106e:	62 17       	cp	r22, r18
    1070:	73 07       	cpc	r23, r19
    1072:	84 07       	cpc	r24, r20
    1074:	38 f0       	brcs	.+14     	; 0x1084 <__divsf3_pse+0x26>
    1076:	9f 5f       	subi	r25, 0xFF	; 255
    1078:	5f 4f       	sbci	r21, 0xFF	; 255
    107a:	22 0f       	add	r18, r18
    107c:	33 1f       	adc	r19, r19
    107e:	44 1f       	adc	r20, r20
    1080:	aa 1f       	adc	r26, r26
    1082:	a9 f3       	breq	.-22     	; 0x106e <__divsf3_pse+0x10>
    1084:	35 d0       	rcall	.+106    	; 0x10f0 <__divsf3_pse+0x92>
    1086:	0e 2e       	mov	r0, r30
    1088:	3a f0       	brmi	.+14     	; 0x1098 <__divsf3_pse+0x3a>
    108a:	e0 e8       	ldi	r30, 0x80	; 128
    108c:	32 d0       	rcall	.+100    	; 0x10f2 <__divsf3_pse+0x94>
    108e:	91 50       	subi	r25, 0x01	; 1
    1090:	50 40       	sbci	r21, 0x00	; 0
    1092:	e6 95       	lsr	r30
    1094:	00 1c       	adc	r0, r0
    1096:	ca f7       	brpl	.-14     	; 0x108a <__divsf3_pse+0x2c>
    1098:	2b d0       	rcall	.+86     	; 0x10f0 <__divsf3_pse+0x92>
    109a:	fe 2f       	mov	r31, r30
    109c:	29 d0       	rcall	.+82     	; 0x10f0 <__divsf3_pse+0x92>
    109e:	66 0f       	add	r22, r22
    10a0:	77 1f       	adc	r23, r23
    10a2:	88 1f       	adc	r24, r24
    10a4:	bb 1f       	adc	r27, r27
    10a6:	26 17       	cp	r18, r22
    10a8:	37 07       	cpc	r19, r23
    10aa:	48 07       	cpc	r20, r24
    10ac:	ab 07       	cpc	r26, r27
    10ae:	b0 e8       	ldi	r27, 0x80	; 128
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <__divsf3_pse+0x56>
    10b2:	bb 0b       	sbc	r27, r27
    10b4:	80 2d       	mov	r24, r0
    10b6:	bf 01       	movw	r22, r30
    10b8:	ff 27       	eor	r31, r31
    10ba:	93 58       	subi	r25, 0x83	; 131
    10bc:	5f 4f       	sbci	r21, 0xFF	; 255
    10be:	3a f0       	brmi	.+14     	; 0x10ce <__divsf3_pse+0x70>
    10c0:	9e 3f       	cpi	r25, 0xFE	; 254
    10c2:	51 05       	cpc	r21, r1
    10c4:	78 f0       	brcs	.+30     	; 0x10e4 <__divsf3_pse+0x86>
    10c6:	0c 94 f7 08 	jmp	0x11ee	; 0x11ee <__fp_inf>
    10ca:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__fp_szero>
    10ce:	5f 3f       	cpi	r21, 0xFF	; 255
    10d0:	e4 f3       	brlt	.-8      	; 0x10ca <__divsf3_pse+0x6c>
    10d2:	98 3e       	cpi	r25, 0xE8	; 232
    10d4:	d4 f3       	brlt	.-12     	; 0x10ca <__divsf3_pse+0x6c>
    10d6:	86 95       	lsr	r24
    10d8:	77 95       	ror	r23
    10da:	67 95       	ror	r22
    10dc:	b7 95       	ror	r27
    10de:	f7 95       	ror	r31
    10e0:	9f 5f       	subi	r25, 0xFF	; 255
    10e2:	c9 f7       	brne	.-14     	; 0x10d6 <__divsf3_pse+0x78>
    10e4:	88 0f       	add	r24, r24
    10e6:	91 1d       	adc	r25, r1
    10e8:	96 95       	lsr	r25
    10ea:	87 95       	ror	r24
    10ec:	97 f9       	bld	r25, 7
    10ee:	08 95       	ret
    10f0:	e1 e0       	ldi	r30, 0x01	; 1
    10f2:	66 0f       	add	r22, r22
    10f4:	77 1f       	adc	r23, r23
    10f6:	88 1f       	adc	r24, r24
    10f8:	bb 1f       	adc	r27, r27
    10fa:	62 17       	cp	r22, r18
    10fc:	73 07       	cpc	r23, r19
    10fe:	84 07       	cpc	r24, r20
    1100:	ba 07       	cpc	r27, r26
    1102:	20 f0       	brcs	.+8      	; 0x110c <__divsf3_pse+0xae>
    1104:	62 1b       	sub	r22, r18
    1106:	73 0b       	sbc	r23, r19
    1108:	84 0b       	sbc	r24, r20
    110a:	ba 0b       	sbc	r27, r26
    110c:	ee 1f       	adc	r30, r30
    110e:	88 f7       	brcc	.-30     	; 0x10f2 <__divsf3_pse+0x94>
    1110:	e0 95       	com	r30
    1112:	08 95       	ret

00001114 <__fixunssfsi>:
    1114:	0e 94 27 09 	call	0x124e	; 0x124e <__fp_splitA>
    1118:	88 f0       	brcs	.+34     	; 0x113c <__fixunssfsi+0x28>
    111a:	9f 57       	subi	r25, 0x7F	; 127
    111c:	98 f0       	brcs	.+38     	; 0x1144 <__fixunssfsi+0x30>
    111e:	b9 2f       	mov	r27, r25
    1120:	99 27       	eor	r25, r25
    1122:	b7 51       	subi	r27, 0x17	; 23
    1124:	b0 f0       	brcs	.+44     	; 0x1152 <__fixunssfsi+0x3e>
    1126:	e1 f0       	breq	.+56     	; 0x1160 <__fixunssfsi+0x4c>
    1128:	66 0f       	add	r22, r22
    112a:	77 1f       	adc	r23, r23
    112c:	88 1f       	adc	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	1a f0       	brmi	.+6      	; 0x1138 <__fixunssfsi+0x24>
    1132:	ba 95       	dec	r27
    1134:	c9 f7       	brne	.-14     	; 0x1128 <__fixunssfsi+0x14>
    1136:	14 c0       	rjmp	.+40     	; 0x1160 <__fixunssfsi+0x4c>
    1138:	b1 30       	cpi	r27, 0x01	; 1
    113a:	91 f0       	breq	.+36     	; 0x1160 <__fixunssfsi+0x4c>
    113c:	0e 94 41 09 	call	0x1282	; 0x1282 <__fp_zero>
    1140:	b1 e0       	ldi	r27, 0x01	; 1
    1142:	08 95       	ret
    1144:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__fp_zero>
    1148:	67 2f       	mov	r22, r23
    114a:	78 2f       	mov	r23, r24
    114c:	88 27       	eor	r24, r24
    114e:	b8 5f       	subi	r27, 0xF8	; 248
    1150:	39 f0       	breq	.+14     	; 0x1160 <__fixunssfsi+0x4c>
    1152:	b9 3f       	cpi	r27, 0xF9	; 249
    1154:	cc f3       	brlt	.-14     	; 0x1148 <__fixunssfsi+0x34>
    1156:	86 95       	lsr	r24
    1158:	77 95       	ror	r23
    115a:	67 95       	ror	r22
    115c:	b3 95       	inc	r27
    115e:	d9 f7       	brne	.-10     	; 0x1156 <__fixunssfsi+0x42>
    1160:	3e f4       	brtc	.+14     	; 0x1170 <__fixunssfsi+0x5c>
    1162:	90 95       	com	r25
    1164:	80 95       	com	r24
    1166:	70 95       	com	r23
    1168:	61 95       	neg	r22
    116a:	7f 4f       	sbci	r23, 0xFF	; 255
    116c:	8f 4f       	sbci	r24, 0xFF	; 255
    116e:	9f 4f       	sbci	r25, 0xFF	; 255
    1170:	08 95       	ret

00001172 <__floatundisf>:
    1172:	e8 94       	clt

00001174 <__fp_di2sf>:
    1174:	f9 2f       	mov	r31, r25
    1176:	96 eb       	ldi	r25, 0xB6	; 182
    1178:	ff 23       	and	r31, r31
    117a:	81 f0       	breq	.+32     	; 0x119c <__fp_di2sf+0x28>
    117c:	12 16       	cp	r1, r18
    117e:	13 06       	cpc	r1, r19
    1180:	14 06       	cpc	r1, r20
    1182:	44 0b       	sbc	r20, r20
    1184:	93 95       	inc	r25
    1186:	f6 95       	lsr	r31
    1188:	87 95       	ror	r24
    118a:	77 95       	ror	r23
    118c:	67 95       	ror	r22
    118e:	57 95       	ror	r21
    1190:	40 40       	sbci	r20, 0x00	; 0
    1192:	ff 23       	and	r31, r31
    1194:	b9 f7       	brne	.-18     	; 0x1184 <__fp_di2sf+0x10>
    1196:	1b c0       	rjmp	.+54     	; 0x11ce <__fp_di2sf+0x5a>
    1198:	99 27       	eor	r25, r25
    119a:	08 95       	ret
    119c:	88 23       	and	r24, r24
    119e:	51 f4       	brne	.+20     	; 0x11b4 <__fp_di2sf+0x40>
    11a0:	98 50       	subi	r25, 0x08	; 8
    11a2:	d2 f7       	brpl	.-12     	; 0x1198 <__fp_di2sf+0x24>
    11a4:	87 2b       	or	r24, r23
    11a6:	76 2f       	mov	r23, r22
    11a8:	65 2f       	mov	r22, r21
    11aa:	54 2f       	mov	r21, r20
    11ac:	43 2f       	mov	r20, r19
    11ae:	32 2f       	mov	r19, r18
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	b1 f3       	breq	.-20     	; 0x11a0 <__fp_di2sf+0x2c>
    11b4:	12 16       	cp	r1, r18
    11b6:	13 06       	cpc	r1, r19
    11b8:	14 06       	cpc	r1, r20
    11ba:	44 0b       	sbc	r20, r20
    11bc:	88 23       	and	r24, r24
    11be:	3a f0       	brmi	.+14     	; 0x11ce <__fp_di2sf+0x5a>
    11c0:	9a 95       	dec	r25
    11c2:	44 0f       	add	r20, r20
    11c4:	55 1f       	adc	r21, r21
    11c6:	66 1f       	adc	r22, r22
    11c8:	77 1f       	adc	r23, r23
    11ca:	88 1f       	adc	r24, r24
    11cc:	ca f7       	brpl	.-14     	; 0x11c0 <__fp_di2sf+0x4c>
    11ce:	55 23       	and	r21, r21
    11d0:	4a f4       	brpl	.+18     	; 0x11e4 <__fp_di2sf+0x70>
    11d2:	44 0f       	add	r20, r20
    11d4:	55 1f       	adc	r21, r21
    11d6:	11 f4       	brne	.+4      	; 0x11dc <__fp_di2sf+0x68>
    11d8:	60 ff       	sbrs	r22, 0
    11da:	04 c0       	rjmp	.+8      	; 0x11e4 <__fp_di2sf+0x70>
    11dc:	6f 5f       	subi	r22, 0xFF	; 255
    11de:	7f 4f       	sbci	r23, 0xFF	; 255
    11e0:	8f 4f       	sbci	r24, 0xFF	; 255
    11e2:	9f 4f       	sbci	r25, 0xFF	; 255
    11e4:	88 0f       	add	r24, r24
    11e6:	96 95       	lsr	r25
    11e8:	87 95       	ror	r24
    11ea:	97 f9       	bld	r25, 7
    11ec:	08 95       	ret

000011ee <__fp_inf>:
    11ee:	97 f9       	bld	r25, 7
    11f0:	9f 67       	ori	r25, 0x7F	; 127
    11f2:	80 e8       	ldi	r24, 0x80	; 128
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	60 e0       	ldi	r22, 0x00	; 0
    11f8:	08 95       	ret

000011fa <__fp_nan>:
    11fa:	9f ef       	ldi	r25, 0xFF	; 255
    11fc:	80 ec       	ldi	r24, 0xC0	; 192
    11fe:	08 95       	ret

00001200 <__fp_pscA>:
    1200:	00 24       	eor	r0, r0
    1202:	0a 94       	dec	r0
    1204:	16 16       	cp	r1, r22
    1206:	17 06       	cpc	r1, r23
    1208:	18 06       	cpc	r1, r24
    120a:	09 06       	cpc	r0, r25
    120c:	08 95       	ret

0000120e <__fp_pscB>:
    120e:	00 24       	eor	r0, r0
    1210:	0a 94       	dec	r0
    1212:	12 16       	cp	r1, r18
    1214:	13 06       	cpc	r1, r19
    1216:	14 06       	cpc	r1, r20
    1218:	05 06       	cpc	r0, r21
    121a:	08 95       	ret

0000121c <__fp_round>:
    121c:	09 2e       	mov	r0, r25
    121e:	03 94       	inc	r0
    1220:	00 0c       	add	r0, r0
    1222:	11 f4       	brne	.+4      	; 0x1228 <__fp_round+0xc>
    1224:	88 23       	and	r24, r24
    1226:	52 f0       	brmi	.+20     	; 0x123c <__fp_round+0x20>
    1228:	bb 0f       	add	r27, r27
    122a:	40 f4       	brcc	.+16     	; 0x123c <__fp_round+0x20>
    122c:	bf 2b       	or	r27, r31
    122e:	11 f4       	brne	.+4      	; 0x1234 <__fp_round+0x18>
    1230:	60 ff       	sbrs	r22, 0
    1232:	04 c0       	rjmp	.+8      	; 0x123c <__fp_round+0x20>
    1234:	6f 5f       	subi	r22, 0xFF	; 255
    1236:	7f 4f       	sbci	r23, 0xFF	; 255
    1238:	8f 4f       	sbci	r24, 0xFF	; 255
    123a:	9f 4f       	sbci	r25, 0xFF	; 255
    123c:	08 95       	ret

0000123e <__fp_split3>:
    123e:	57 fd       	sbrc	r21, 7
    1240:	90 58       	subi	r25, 0x80	; 128
    1242:	44 0f       	add	r20, r20
    1244:	55 1f       	adc	r21, r21
    1246:	59 f0       	breq	.+22     	; 0x125e <__fp_splitA+0x10>
    1248:	5f 3f       	cpi	r21, 0xFF	; 255
    124a:	71 f0       	breq	.+28     	; 0x1268 <__fp_splitA+0x1a>
    124c:	47 95       	ror	r20

0000124e <__fp_splitA>:
    124e:	88 0f       	add	r24, r24
    1250:	97 fb       	bst	r25, 7
    1252:	99 1f       	adc	r25, r25
    1254:	61 f0       	breq	.+24     	; 0x126e <__fp_splitA+0x20>
    1256:	9f 3f       	cpi	r25, 0xFF	; 255
    1258:	79 f0       	breq	.+30     	; 0x1278 <__fp_splitA+0x2a>
    125a:	87 95       	ror	r24
    125c:	08 95       	ret
    125e:	12 16       	cp	r1, r18
    1260:	13 06       	cpc	r1, r19
    1262:	14 06       	cpc	r1, r20
    1264:	55 1f       	adc	r21, r21
    1266:	f2 cf       	rjmp	.-28     	; 0x124c <__fp_split3+0xe>
    1268:	46 95       	lsr	r20
    126a:	f1 df       	rcall	.-30     	; 0x124e <__fp_splitA>
    126c:	08 c0       	rjmp	.+16     	; 0x127e <__fp_splitA+0x30>
    126e:	16 16       	cp	r1, r22
    1270:	17 06       	cpc	r1, r23
    1272:	18 06       	cpc	r1, r24
    1274:	99 1f       	adc	r25, r25
    1276:	f1 cf       	rjmp	.-30     	; 0x125a <__fp_splitA+0xc>
    1278:	86 95       	lsr	r24
    127a:	71 05       	cpc	r23, r1
    127c:	61 05       	cpc	r22, r1
    127e:	08 94       	sec
    1280:	08 95       	ret

00001282 <__fp_zero>:
    1282:	e8 94       	clt

00001284 <__fp_szero>:
    1284:	bb 27       	eor	r27, r27
    1286:	66 27       	eor	r22, r22
    1288:	77 27       	eor	r23, r23
    128a:	cb 01       	movw	r24, r22
    128c:	97 f9       	bld	r25, 7
    128e:	08 95       	ret

00001290 <__tablejump2__>:
    1290:	ee 0f       	add	r30, r30
    1292:	ff 1f       	adc	r31, r31
    1294:	05 90       	lpm	r0, Z+
    1296:	f4 91       	lpm	r31, Z
    1298:	e0 2d       	mov	r30, r0
    129a:	09 94       	ijmp

0000129c <_exit>:
    129c:	f8 94       	cli

0000129e <__stop_program>:
    129e:	ff cf       	rjmp	.-2      	; 0x129e <__stop_program>
